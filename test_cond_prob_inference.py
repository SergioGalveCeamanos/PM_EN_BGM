# -*- coding: utf-8 -*-
"""
Created on Tue Aug  3 14:25:48 2021

@author: sega01
"""
# test the joint distribution between activations - variables

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import pickle
import copy
from matplotlib import cm as CM
from matplotlib.lines import Line2D

from elasticsearch import Elasticsearch

import seaborn as sns
from matplotlib.colors import LogNorm

def get_index_analytics(date, ty):
    index = ty+date[5:7]+date[0:4]
    return index


def get_analytics(client, time_start, time_stop, device, version, names_analysis):
         ty = 'pm_bgm_data_'  # 'pm_bgm_data_'
         ind = get_index_analytics(time_start, ty)
         response = client.search(
            index=ind,
            body={
                  "query": {
                    "bool": {
                      # Also: filter, must_not, should
                      "must": [
                        {
                          "match": {
                            "device": device
                          }
                        },
                        {
                          "match": {
                            "trained_version": version
                          }
                        },
                        {
                        "range": {
                        # Timestap format= "2019-12-30T09:25:20.000Z"
                        "timestamp": {
                        "gt": time_start,  # Date Format in Fault Manager: '2019-05-02 08:00:10'
                        "lt": time_stop
                                     }
                                 }
                        }
                      ],
                      "must_not": [],
                      "should": []
                    }
                  },
                  "from": 0,
                  "size": 100,
                  "sort": [{"timestamp": {"order": "asc"}}],
                  "aggs": {}
                },
            scroll='5m'
         )
         # DATA ARRANGE: each mso will have a dictionary with as many temporal series as in self.names_analysis --> all msos in the list data
         data = []
         first = True
         for hit in response['hits']['hits']:
             # print(hit)
             if first:
                 first = False
                 n_msos = len(hit['_source'][names_analysis[0]])
                 for i in range(n_msos):
                     new_mso = {}
                     for name in names_analysis:
                         field = hit['_source'][name]
                         if name == 'timestamp':
                             new_mso[name] = [field]
                         else:
                             new_mso[name] = [field[i]]
                     data.append(new_mso)
             else:
                 for i in range(n_msos):
                     for name in names_analysis:
                         field = hit['_source'][name]
                         if name == 'timestamp':
                             data[i][name].append(field)
                         else:
                             data[i][name].append(field[i])

         sc_id = response['_scroll_id']
         more = True
         while more:
             sc = client.scroll(scroll_id=sc_id, scroll='2m')  # ,scroll='1m'
             # sc_id=response['_scroll_id']
             if len(sc['hits']['hits']) == 0:  # || total>20
                 more = False
             else:
                 for hit in sc['hits']['hits']:
                     if len(hit['_source'][names_analysis[0]]) == n_msos:
                         for i in range(n_msos):
                             for name in names_analysis:
                                 field = hit['_source'][name]
                                 if name == 'timestamp':
                                     data[i][name].append(field)
                                 else:
                                     data[i][name].append(field[i])
                     else:
                         print('  [!] WARNING: The gathered analysis data might come from different models, two sizes of MSO_SET: '+str(
                             len(hit['_source'][names_analysis[0]]))+', '+str(n_msos)+'  | timestamp: '+hit['_source']['timestamp'])

         return data

def get_telemetry(client,time_start, time_stop, device, var):
         ty='telemetry_'
         ind=get_index_analytics(time_start,ty) 
         response = client.search(
            index=ind,
            body={
                  "query": {
                    "bool": {
                      # Also: filter, must_not, should
                      "must": [ 
                        {
                          "match": {
                            "deviceId": device
                          }
                        },
                        {
                          "match": {
                            "aggregationSeconds": 1
                          }
                        },
                        {
                          "match": {
                            # name of the variable from sensors
                            "param": var 
                          }
                        },
                        {
                        "range": {
                        # Timestap format= "2019-12-30T09:25:20.000Z"
                        "timestamp": { 
                        "gt": time_start, # Date Format in Fault Manager: '2019-05-02 08:00:10'
                        "lt": time_stop 
                                     }
                                 }
                        }
                      ],
                      "must_not": [],
                      "should": []
                    }
                  },
                  "from": 0,
                  "size": 100,
                  "sort": [{ "timestamp" : {"order" : "asc"}}],
                  "aggs": {}
                },
            scroll='5m'
         )
         # DATA ARRANGE: each mso will have a dictionary with as many temporal series as in self.names_analysis --> all msos in the list data
         data={}
         for hit in response['hits']['hits']:
             #print(hit)
             data[hit['_source']['timestamp']]=hit['_source']['avg']
            
         sc_id=response['_scroll_id']
         more=True
         while more:
             sc=client.scroll(scroll_id=sc_id,scroll='2m') # ,scroll='1m'
             #sc_id=response['_scroll_id']
             if len(sc['hits']['hits'])==0: #|| total>20
                 more=False
             else:
                 for hit in sc['hits']['hits']:
                     data[hit['_source']['timestamp']]=hit['_source']['avg']
                     
         return data
     
def fix_dict(d):
    new_d = {}
    for n in d:
        new_d[int(n)] = d[n]
    return new_d


device = 74124
# fault_mso_sentivitity for version: "_test_I_ClustSegm_180621_v1"
fault_mso_sensitivity = {10: {'fc3': {0: 0.014702806019391147, 1: 0.0, 2: 0.0023195391867075247, 3: 0.02917796795049289, 4: 0.020672063018461945}, 'fc4': {0: 0.08007573438061659, 1: 0.1048629497587624, 2: 0.0713212918762229, 3: 0.13329612734283663, 4: 0.041636680084586715}, 'fl1': {0: 0.014702806019391147, 1: 0.0, 2: 0.014134438533967246, 3: 0.02917796795049289, 4: 0.03721127433952668}, 'fo2': {0: 0.05100334050519008, 1: 0.03739915332905163, 2: 0.01599296485772877, 3: 0.06720300360473301, 4: 0.018738049211492677}, 'fo3': {0: 0.14830814971761333, 1: 0.145847440693686, 2: 0.1548109014243899, 3: 0.05239000936405426, 4: 0.03295773250651927}, 'fs2': {0: 0.029072393875426508, 1: 0.06746379642971076, 2: 0.05532832701849414, 3: 0.0660931237381036, 4: 0.022898630873094034}, 'fs3': {0: 0.10080425028264847, 1: 0.11931109970511898, 2: 0.0814596652745466, 3: 0.13257991240821024, 4: 0.11063143240275748}, 'fs5': {0: 0.05100334050519008, 1: 0.03739915332905163, 2: 0.01599296485772877, 3: 0.06720300360473301, 4: 0.018738049211492677}, 'fs6': {0: 0.14830814971761333, 1: 0.145847440693686, 2: 0.1548109014243899, 3: 0.05239000936405426, 4: 0.03295773250651927}, 'fc2': {0: 0.280905516908675, 1: 0.27389886580368517, 2: 0.2901078028863611, 3: 0.2959541044274075, 4: 0.17690304823714265}, 'fs9': {0: 0.0405410799292701, 1: 0.019208618082366645, 2: 0.08037899955219856, 3: 0.03022412988526937, 4: 0.20319864779858407}, 'fs10': {0: 0.040572432138973914, 1: 0.048761482174880806, 2: 0.06334220310726447, 3: 0.03196714106846293, 4: 0.0}, 'fs8': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.012343499291149489, 4: 0.2834566598098227}}, 16: {'fc1': {0: 0.4841311511731264, 1: 0.4920719664915089, 2: 0.495359903864218}, 'fs2': {0: 0.06175060987070388, 1: 0.06345349918457671, 2: 0.04685274711989728}, 'fs3': {0: 0.12383562851895524, 1: 0.1355077011154559, 2: 0.14103094975120162}, 'fs5': {0: 0.16519505574061097, 1: 0.15208479516208095, 2: 0.13090375558809925}, 'fs6': {0: 0.1223170423438215, 1: 0.13961362873748243, 2: 0.168645583478064}, 'fl1': {0: 0.04277051235278214, 1: 0.017268409308895075, 2: 0.01720706019851993}}, 30: {'fc1': {0: 0.2370940361818125, 1: 0.2694741166692367, 2: 0.23583826791765725, 3: 0.22455639247786316, 4: 0.23298832446866985}, 'fc5': {0: 9.184935529066003e-05, 1: 1.0924661553398257e-06, 2: 0.0004683726170091345, 3: 0.0037451036942574584, 4: 0.0009663989601400383}, 'fc3': {0: 0.014692145637859694, 1: 0.0006097565281819215, 2: 0.004943869771196586, 3: 0.024278058787204695, 4: 0.026945157695436}, 'fc4': {0: 0.036125639328360104, 1: 0.06163610103021877, 2: 0.04508142095138226, 3: 0.07252111023634754, 4: 0.01706157692207466}, 'fo2': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0}, 'fo3': {0: 0.11987215917781632, 1: 0.10430894251130668, 2: 0.12109289516583362, 3: 0.04048888827204571, 4: 0.05211823047643781}, 'fc2': {0: 0.23031743864044618, 1: 0.22000700221641278, 2: 0.2287624799687663, 3: 0.25060873998837735, 4: 0.24564057762140054}, 'fs8': {0: 0.037123638806504794, 1: 0.014253510884443663, 2: 0.07309275295281223, 3: 0.10864217098426573, 4: 0.1432452846014636}, 'fs10': {0: 0.07280506169694705, 1: 0.059624512030470166, 2: 0.04946943034947981, 3: 0.02257998060031287, 4: 0.02013456813013173}, 'fl1': {0: 0.017948202457839273, 1: 0.006345377934824397, 2: 0.014245484927987925, 3: 0.026438785885357603, 4: 0.036408925734023864}, 'fs2': {0: 0.036125639328360104, 1: 0.06163610103021877, 2: 0.04508142095138226, 3: 0.07252111023634754, 4: 0.01706157692207466}, 'fs3': {0: 0.07784018085565647, 1: 0.09779345172106875, 2: 0.06036233664365003, 3: 0.10938566687131701, 4: 0.15434474903156953}, 'fs6': {0: 0.11987215917781632, 1: 0.10430894251130668, 2: 0.12109289516583362, 3: 0.04048888827204571, 4: 0.05211823047643781}, 'fs12': {0: 9.184935529066003e-05, 1: 1.0924661553398257e-06, 2: 0.0004683726170091345, 3: 0.0037451036942574584, 4: 0.0009663989601400383}}, 41: {'fc1': {0: 0.24152795268695212, 1: 0.23943392840079983, 2: 0.23970629137766816, 3: 0.13838049410417377, 4: 0.2249179856718699}, 'fl1': {0: 0.0023454505057384596, 1: 0.014502718545984613, 2: 0.020732150683205167, 3: 0.03884032093209827, 4: 0.023831023071854484}, 'fc3': {0: 0.0012814920157958353, 1: 0.009740084528143051, 2: 0.009842855011106577, 3: 0.016404523175093232, 4: 0.01876916230121003}, 'fc4': {0: 0.10662428206851611, 1: 0.09177077343016157, 2: 0.11060467366562175, 3: 0.01240420506824594, 4: 0.12436500022097188}, 'fo2': {0: 0.10662428206851611, 1: 0.09177077343016157, 2: 0.11060467366562175, 3: 0.01240420506824594, 4: 0.12436500022097188}, 'fo3': {0: 0.08426247222770064, 1: 0.09634489405394499, 2: 0.0769310491316329, 3: 0.01250239431981746, 4: 0.025870253227902994}, 'fc2': {0: 0.157442876633012, 1: 0.18008828110616842, 2: 0.14890158915744295, 3: 0.14063888809133307, 4: 0.1584659594155962}, 'fs9': {0: 0.0022135242537884817, 1: 0.0, 2: 0.013899837089887901, 3: 0.196050395263986, 4: 0.03283922012861072}, 'fs8': {0: 0.054699250214381226, 1: 0.040306075996957895, 2: 0.03675735259437954, 3: 0.3162237544078266, 4: 0.04387699465983583}, 'fs1': {0: 0.0025144231285896164, 1: 0.0013711761247199822, 2: 0.003202531917863666, 3: 0.00020612322201091134, 4: 0.0028432761799505866}, 'fs3': {0: 0.04957723990079278, 1: 0.0465556268988517, 2: 0.04128127290831491, 3: 0.09103809695910534, 4: 0.06962087145235056}, 'fs5': {0: 0.10662428206851611, 1: 0.09177077343016157, 2: 0.11060467366562175, 3: 0.01240420506824594, 4: 0.12436500022097188}, 'fs6': {0: 0.08426247222770064, 1: 0.09634489405394499, 2: 0.0769310491316329, 3: 0.01250239431981746, 4: 0.025870253227902994}}, 52: {'fc1': {0: 0.20856745296434276, 1: 0.22148098660175258, 2: 0.21241006593451114, 3: 0.21506087713103636, 4: 0.21809024810522443}, 'fc3': {0: 0.017754649969651783, 1: 0.020632270360804904, 2: 0.0008148740138301373, 3: 0.008355475171403478, 4: 0.0}, 'fc4': {0: 0.19827333749806697, 1: 0.16641405410326984, 2: 0.2108902152356844, 3: 0.2053631921382826, 4: 0.20971137257720288}, 'fo2': {0: 0.15912312832388387, 1: 0.1362757162194914, 2: 0.16023104985795755, 3: 0.1548593943809486, 4: 0.15266098398120495}, 'fo3': {0: 0.0, 1: 0.027995515589221025, 2: 0.0, 3: 0.0003505156444789905, 4: 0.007473333371406931}, 'fc2': {0: 0.01242313606588644, 1: 0.07458793437322658, 2: 0.0061056948712266855, 3: 0.011439246509025353, 4: 0.012388471400840062}, 'fs9': {0: 0.12865602007406754, 1: 0.04516564980351539, 2: 0.06829597139584564, 3: 0.08166280482986543, 4: 0.04180150827068901}, 'fs10': {0: 0.04888017217010612, 1: 0.06533461598616074, 2: 0.08198645446043963, 3: 0.09949214189251938, 4: 0.1397838341882074}, 'fl1': {0: 0.0280487654359276, 1: 0.04770368727006666, 2: 0.0023347247126568565, 3: 0.01770264451967823, 4: 0.0009055421566145921}, 'fs2': {0: 0.039150209174183104, 1: 0.03013833788377843, 2: 0.0506591653777269, 3: 0.050503797757334025, 4: 0.05705038859599794}, 'fs5': {0: 0.15912312832388387, 1: 0.1362757162194914, 2: 0.16023104985795755, 3: 0.1548593943809486, 4: 0.15266098398120495}, 'fs6': {0: 0.0, 1: 0.027995515589221025, 2: 0.0, 3: 0.0003505156444789905, 4: 0.007473333371406931}, 'fs8': {0: 0.0, 1: 0.0, 2: 0.04604073428216359, 3: 0.0, 4: 0.0}}, 86: {'fc1': {0: 0.2254095099237621, 1: 0.30748256373306204, 2: 0.23695955407035083, 3: 0.2377596989845182, 4: 0.2565641701189724}, 'fc3': {0: 0.0, 1: 0.003944874638355299, 2: 0.021123056260052127, 3: 0.023915936894094648, 4: 0.01444890049830529}, 'fc4': {0: 0.04314051459830806, 1: 0.07995123790232296, 2: 0.09360734836071019, 3: 0.11072678078024213, 4: 0.12189026102312442}, 'fo2': {0: 0.0, 1: 0.0, 2: 0.04769012271976019, 3: 0.058756765323078435, 4: 0.07995007518203234}, 'fo3': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0}, 'fc2': {0: 0.36048638180950754, 1: 0.28229597372409115, 2: 0.26478878000047873, 3: 0.2586293898556112, 4: 0.1751529594216259}, 'fs9': {0: 0.13832621598041805, 1: 0.0, 2: 0.06731512619441145, 3: 0.04571862645602014, 4: 0.0}, 'fc5': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0}, 'fs10': {0: 0.0, 1: 0.0, 2: 0.002887733529602618, 3: 0.0, 4: 0.06366037236649687}, 'fl1': {0: 0.04746249297701028, 1: 0.0715839793467591, 2: 0.05472775574023585, 3: 0.03667815684705435, 4: 0.021209633832870813}, 'fs11': {0: 0.0036139338821210855, 1: 0.007448955815375583, 2: 0.003772834267115389, 3: 0.0014085829139110417, 4: 0.008660095386082605}, 'fo5': {0: 0.0036139338821210855, 1: 0.007448955815375583, 2: 0.003772834267115389, 3: 0.0014085829139110417, 4: 0.008660095386082605}, 'fs2': {0: 0.04314051459830806, 1: 0.07995123790232296, 2: 0.04591722564095, 3: 0.05197001545716369, 4: 0.04194018584109206}, 'fs3': {0: 0.1348065023484437, 1: 0.15989222112233525, 2: 0.10974750622945692, 3: 0.1142706982513164, 4: 0.12791317576128247}, 'fs5': {0: 0.0, 1: 0.0, 2: 0.04769012271976019, 3: 0.058756765323078435, 4: 0.07995007518203234}}}

# _test_I_260521,_test_II_StabilityFilt_260521,_test_VI_StabilityFilt_090621
v = "_test_III_NewConf_220721"#"_test_I_ClustSegm_180621_v1"

if v == "_test_I_260521":
    fault_mso_sensitivity = {10: {'fc3': [0.035903998271201484, 0.0064824975770429805, 0.036977369455424985, 0.0, 0.01823859234591566], 'fc4': [0.08814765704461945, 0.04248315386259618, 0.12539959130400985, 0.08469994595306575, 0.17168589029441744], 'fl1': [0.047135740471734924, 0.008281676086642466, 0.06264743001525995, 0.0, 0.01823859234591566], 'fo2': [0.0, 7.239963823862627e-05, 0.10084842664488405, 0.027464008751678096, 0.09272578249811118], 'fo3': [0.12617213884043169, 0.0434853459634525, 0.09260277709067584, 0.07014000270246132, 0.0818327192433409], 'fs2': [0.08814765704461945, 0.04241075422435755, 0.024551164659125806, 0.05723593720138766, 0.07896010779630626], 'fs3': [0.10756503166262438, 0.05607645354586309, 0.10585982923523733, 0.0706670128147635, 0.11053473452801119], 'fs5': [0.0, 7.239963823862627e-05, 0.10084842664488405, 0.027464008751678096, 0.09272578249811118], 'fs6': [0.12617213884043169, 0.0434853459634525, 0.09260277709067584, 0.07014000270246132, 0.0818327192433409], 'fc2': [0.2596531119918792, 0.11038464808391393, 0.22413266688574818, 0.1582413157193076, 0.20861707206775423], 'fs9': [0.11346686610664135, 0.3545223859310853, 0.03352954097407399, 0.21855219131246495, 0.024147259870354695], 'fs10': [0.0, 0.0011941745654448412, 0.0, 0.034037513154392615, 0.020460747268420634], 'fs8': [0.00763565972581641, 0.2910487649196714, 0.0, 0.18135806093633902, 0.0]}, 16: {'fc1': [0.4981737519082215, 0.48766544143208257, 0.4793542806469006, 0.4925953533063003, 0.48823140902189016], 'fs2': [0.03470527133712724, 0.06578982566278685, 0.037815754171201366, 0.05820925402470152, 0.07436479443228859], 'fs3': [0.1279174595256942, 0.15015280406208298, 0.13523612894154066, 0.1477808934631628, 0.14019562077980596], 'fs5': [0.2011038336852787, 0.11994541702264525, 0.1502629158769238, 0.12197828285413549, 0.13961919435274858], 'fs6': [0.13368247418560203, 0.15097868262997116, 0.14039181550252988, 0.14685622482167043, 0.12315682626683219], 'fl1': [0.00441720935807635, 0.025467829190431113, 0.05693910486090357, 0.032579991530029453, 0.03443215514643444]}, 30: {'fc1': [0.272148197498368, 0.24181442013299145, 0.2366448743419905, 0.210585462593206, 0.2527127916733255, 0.23779669278352944, 0.24415908235296388, 0.2563397633481321], 'fc5': [0.002027458680100215, 0.002773039935287352, 0.0005533044831658862, 0.009818950471910653, 0.0005733815251981321, 0.0013405625204526562, 0.0007771780545361509, 0.0024479249795411164], 'fc3': [0.0, 0.024161901161231108, 0.025719831583578427, 0.020088488529481262, 0.017045155012274906, 0.005438712697060586, 0.012030525074712379, 0.047798847139575294], 'fc4': [0.0880959979494743, 0.050764052702882576, 0.049248032035166873, 0.03560836728242409, 0.06607143338348725, 0.06251040248088967, 0.04256971135563526, 0.05292034075112266], 'fo2': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'fo3': [0.07395567008406152, 0.07400325391010285, 0.08614386421426898, 0.0436732671834756, 0.10165855169464824, 0.10239578930667029, 0.09272500250503292, 0.08980855781789386], 'fc2': [0.187093384741011, 0.19135524530655307, 0.19332349481542435, 0.19512496268432516, 0.18958504850563984, 0.19397868799767812, 0.22226803679778398, 0.2278669857734589], 'fs8': [0.0, 0.08333398434160047, 0.06860955955443018, 0.13671283513135005, 0.02831198423889747, 0.06782098391191216, 0.015983477115568263, 4.689489624757909e-05], 'fs10': [0.10250363486851674, 0.06304474127984117, 0.07683902856324012, 0.10789476452922918, 0.07371032575573032, 0.08414220030076451, 0.112520201261555, 0.016184149826779994], 'fl1': [0.01207199338448376, 0.04847613134371312, 0.03601154114822268, 0.06280508486253246, 0.03087139884968592, 0.017781630482070727, 0.01615813331479884, 0.0507437646420442], 'fs2': [0.0880959979494743, 0.050764052702882576, 0.049248032035166873, 0.03560836728242409, 0.06607143338348725, 0.06251040248088967, 0.04256971135563526, 0.05292034075112266], 'fs3': [0.09802453608034835, 0.09273288333752402, 0.09096126852791042, 0.08858723179425515, 0.07115656275777897, 0.06054758321095932, 0.10473676025220921, 0.11066594727664665], 'fs6': [0.07395567008406152, 0.07400325391010285, 0.08614386421426898, 0.0436732671834756, 0.10165855169464824, 0.10239578930667029, 0.09272500250503292, 0.08980855781789386], 'fs12': [0.002027458680100215, 0.002773039935287352, 0.0005533044831658862, 0.009818950471910653, 0.0005733815251981321, 0.0013405625204526562, 0.0007771780545361509, 0.0024479249795411164]}, 41: {'fc1': [0.26029776732423554, 0.19148829874893508, 0.238896745596163,
        0.16422015307616084, 0.2642728739821142, 0.2609478272130474], 'fl1': [0.04087225584931388, 0.02003333328362892, 0.008181247758814908, 0.027139097311237665, 0.008836756097316153, 0.02095426265552429], 'fc3': [0.017595201186061962, 0.00733848889173289, 0.007906687592961996, 0.014450628795096957, 0.0013590310273666585, 0.010976767793276623], 'fc4': [0.09049561203272047, 0.0897451078684531, 0.1233763246549427, 0.05805063171626947, 0.10862958463696842, 0.09067055709834215], 'fo2': [0.09049561203272047, 0.0897451078684531, 0.1233763246549427, 0.05805063171626947, 0.10862958463696842, 0.09067055709834215], 'fo3': [0.05596346910443041, 0.03705652819228625, 0.05505318457258675, 0.03834839720375727, 0.0857486925469422, 0.09084839167891264], 'fc2': [0.18757501993841907, 0.10841332679521509, 0.1164280812818987, 0.1116674951484324, 0.1648961211769332, 0.18396130411175493], 'fs9': [0.013398093236884066, 0.10348439927562231, 0.011390701711086169, 0.1582369878173472, 0.0, 0.0], 'fs8': [0.0, 0.17288187214549927, 0.07153362504244695, 0.2173743191785651, 0.0, 0.0], 'fs1': [0.0062862566342304195, 0.0010200825731349226, 0.005234891703846018, 0.0009299734768434102, 0.0008322069832260279, 0.0], 'fs3': [0.09056163152383277, 0.0519918182962997, 0.06019267620278065, 0.05513265563999341, 0.06241687172825407, 0.06945138357354497], 'fs5': [0.09049561203272047, 0.0897451078684531, 0.1233763246549427, 0.05805063171626947, 0.10862958463696842, 0.09067055709834215], 'fs6': [0.05596346910443041, 0.03705652819228625, 0.05505318457258675, 0.03834839720375727, 0.0857486925469422, 0.09084839167891264]}, 52: {'fc1': [0.2197909264649741, 0.2188907796487518, 0.21754531590538365, 0.2181005600708864, 0.21697268147345905], 'fc3': [0.003959417470575125, 0.009633532931425694, 0.0021316446691884124, 0.029853845277973412, 0.01731394425801682], 'fc4': [0.2129787790289674, 0.20528542061240085, 0.20362618146160505, 0.18133116934088064, 0.20441502455677826], 'fo2': [0.14461682603766685, 0.14592640704458662, 0.14679591659694588, 0.1383617459718705, 0.1443515660511115], 'fo3': [0.0018213837724241567, 0.0008143314102266744, 0.007852015830793167, 0.012192695684771588, 0.0], 'fc2': [0.008315874298111816, 0.013605359036350958, 0.016261416483601816, 0.03676939073000576, 0.012880555848664365], 'fs9': [0.03165996620146253, 0.07338621539198871, 0.09188941394758122, 0.07184205659408491, 0.04042589199884082], 'fs10': [0.13866912753679783, 0.10393364134409142, 0.0942211345303287, 0.0635941309806668, 0.11734573981313193], 'fl1': [0.008950181134157723, 0.022424560557549975, 0.008198763282173878, 0.054430540323207585, 0.029871601174697632], 'fs2': [0.0683619529913005, 0.05935901356781424, 0.056830264864659134, 0.042969423369010135, 0.06006345850566677], 'fs5': [0.14461682603766685, 0.14592640704458662, 0.14679591659694588, 0.1383617459718705, 0.1443515660511115], 'fs6': [0.0018213837724241567, 0.0008143314102266744, 0.007852015830793167, 0.012192695684771588, 0.0], 'fs8': [0.014437355253470995, 0.0, 0.0, 0.0, 0.012007970268521302]}, 86: {'fc1': [0.2682523636233243, 0.23946616766764475, 0.2560907228069728, 0.22914029153140683, 0.25242140459347423], 'fc3': [0.04986334473632703, 0.028629543601443225, 0.02119235027728986, 0.013396379212171801, 0.0048201506714945315], 'fc4': [0.12093154266990366, 0.1020373284929783, 0.06626302199854534, 0.08173578078714745, 0.08123964174194497], 'fo2': [0.043438085287627055, 0.0, 0.018198090296024313, 0.01672060637612683, 0.0], 'fo3': [0.0, 0.0, 0.0, 0.0, 0.0], 'fc2': [0.16469384467516954, 0.17404134335797458, 0.21993721728853144, 0.16603233394841674, 0.24694227092591262], 'fs9': [0.0, 0.13644914621811835, 0.1266735755079946, 0.11523592542313368, 0.14693923283252694], 'fc5': [0.0, 0.0, 0.0, 0.0, 0.0], 'fs10': [0.02745441599168061, 0.03448804114675624, 0.0, 0.10204405697245299, 0.004921150466610333], 'fl1': [0.08139895106886821, 0.0660004569086108, 0.08473247082777668, 0.05200632646873316, 0.05626975591369789], 'fs11': [0.0036253473281582125, 0.00839635912299831, 0.007180974370189369, 0.016578977502782515, 0.0027372967515339017], 'fo5': [0.0036253473281582125, 0.00839635912299831, 0.007180974370189369, 0.016578977502782515, 0.0027372967515339017], 'fs2': [0.0774934573822766, 0.1020373284929783, 0.04806493170252103, 0.06501517441102063, 0.08123964174194497], 'fs3': [0.11578521462087948, 0.10005792586749887, 0.12628758025794065, 0.108794563487698, 0.11973215760932582], 'fs5': [0.043438085287627055, 0.0, 0.018198090296024313, 0.01672060637612683, 0.0]}}
elif v == "_test_III_NewConf_220721":
    fault_mso_sensitivity = {10: {'fc3': {0: 0.007820950009105487, 1: 0.0, 2: 0.039314078152276104, 3: 0.008734133093246372}, 'fc4': {0: 0.26004025518508744, 1: 0.25485840469728616, 2: 0.20474078718157943, 3: 0.26048749639171054}, 'fl1': {0: 0.017456694501350095, 1: 0.011195591930206328, 2: 0.07486464037868992, 3: 0.01666760774598133}, 'fo2': {0: 0.18162006203002257, 1: 0.192266967372658, 2: 0.16564814554299118, 3: 0.19078663873652846}, 'fo3': {0: 0.00942109710976652, 1: 0.0110935273223554, 2: 0.03848266377897958, 3: 0.006409555198331429}, 'fs2': {0: 0.0784201931550649, 1: 0.06259143732462819, 2: 0.03909264163858828, 3: 0.06970085765518207}, 'fs3': {0: 0.0015110406581312448, 1: 0.007468145617288012, 2: 0.010220586694110584, 3: 0.002352424013380808}, 'fs5': {0: 0.18162006203002257, 1: 0.192266967372658, 2: 0.16564814554299118, 3: 0.19078663873652846}, 'fs6': {0: 0.00942109710976652, 1: 0.0110935273223554, 2: 0.03848266377897958, 3: 0.006409555198331429}, 'fc2': {0: 0.034026606745555715, 1: 0.029757264869849736, 2: 0.08803950829432763, 3: 0.016695453864447193}, 'fs9': {0: 0.07479885676015477, 1: 0.13657251886386726, 2: 0.05802434118018132, 3: 0.12605822459173177}, 'fs10': {0: 0.14384308470597226, 1: 0.09083564730684746, 2: 0.077441797836305, 3: 0.10491141477460003}, 'fs8': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0}}, 16: {'fc1': {0: 0.45965640939021296, 1: 0.46855547452129437, 2: 0.4498250173535053}, 'fs2': {0: 0.044951856103667226, 1: 0.03164105724079578, 2: 0.04273409636516231}, 'fs3': {0: 0.08673482022197998, 1: 0.08471200705465583, 2: 0.08031096520126071}, 'fs5': {0: 0.14415487085689035, 1: 0.12062603503622896, 2: 0.16403229897164281}, 'fs6': {0: 0.11695138098473569, 1: 0.1353769510718837, 2: 0.0966154989943983}, 'fl1': {0: 0.1475506624425139, 1: 0.1590884750751414, 2: 0.16648212311403063}}, 30: {'fc1': {0: 0.18683113859789804, 1: 0.16702164111652118, 2: 0.1668628533380106, 3: 0.2082058329055987}, 'fc5': {0: 0.003188165987846259, 1: 0.002698349594161044, 2: 0.00194445975884554, 3: 0.00022576589902473511}, 'fc3': {0: 0.09225906514202208, 1: 0.15543191715742527, 2: 0.110872813585059, 3: 0.07326427176278753}, 'fc4': {0: 0.028044475689810243, 1: 0.005504894230241024, 2: 0.02551673551899456, 3: 0.015758061735562393}, 'fo2': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0}, 'fo3': {0: 0.05564842076810855, 1: 0.043664814908893665, 2: 0.1095046389681136, 3: 0.13003685116201463}, 'fc2': {0: 0.2687746525340408, 1: 0.26019811363079576, 2: 0.24384899687185743, 3: 0.2893526006208855}, 'fs8': {0: 0.0589403313576522, 1: 0.0, 2: 0.007960527825658578, 3: 0.0}, 'fs10': {0: 0.02403538019485536, 1: 0.04032836149385439, 2: 0.05380884745154547, 3: 0.001460745346715483}, 'fl1': {0: 0.17032177273214089, 1: 0.2249765544061783, 2: 0.13805019093138118, 3: 0.10381600631354457}, 'fs2': {0: 0.028044475689810243, 1: 0.005504894230241024, 2: 0.02551673551899456, 3: 0.015758061735562393}, 'fs3': {0: 0.02507553454986041, 1: 0.04830729472863346, 2: 0.0046641015045802165, 3: 0.031859185457264606}, 'fs6': {0: 0.05564842076810855, 1: 0.043664814908893665, 2: 0.1095046389681136, 3: 0.13003685116201463}, 'fs12': {0: 0.003188165987846259, 1: 0.002698349594161044, 2: 0.00194445975884554, 3: 0.00022576589902473511}}, 41: {'fc1': {0: 0.24090274654610586, 1: 0.23430087264578567, 2: 0.2336634976747631, 3: 0.237046175781309}, 'fl1': {0: 0.03559926137736091, 1: 0.017008852900408628, 2: 0.06630817648452014, 3: 0.03575698204176784}, 'fc3': {0: 0.018681530973580687, 1: 0.0, 2: 0.03897815613911055, 3: 0.017637792418310948}, 'fc4': {0: 0.10778886971665169, 1: 0.12724219945439136, 2: 0.10975820464602955, 3: 0.114384936958635}, 'fo2': {0: 0.10778886971665169, 1: 0.12724219945439136, 2: 0.10975820464602955, 3: 0.114384936958635}, 'fo3': {0: 0.06767491490192344, 1: 0.04149663758553843, 2: 0.06241155003322079, 3: 0.061372731071702526}, 'fc2': {0: 0.1339390306098694, 1: 0.14310010797153008, 2: 0.12390529302873354, 3: 0.122661238822674}, 'fs9': {0: 0.018288953467412553, 1: 0.08697615523726106, 2: 0.02628176183944179, 3: 0.0}, 'fs8': {0: 0.04485169261714792, 1: 0.003360320584208454, 2: 0.020947589236669964, 3: 0.07615139333945248}, 'fs1': {0: 0.0004991139309701956, 1: 0.001980634421107733, 2: 0.0016540889421276374, 3: 0.0016768264496610694}, 'fs3': {0: 0.04852123152375052, 1: 0.04855318270544726, 2: 0.034163722650103166, 3: 0.04316931812751458}, 'fs5': {0: 0.10778886971665169, 1: 0.12724219945439136, 2: 0.10975820464602955, 3: 0.114384936958635}, 'fs6': {0: 0.06767491490192344, 1: 0.04149663758553843, 2: 0.06241155003322079, 3: 0.061372731071702526}}, 52: {'fc1': {0: 0.21909216871950002, 1: 0.21757451040701667, 2: 0.2176175031508308, 3: 0.2169484350282947}, 'fc3': {0: 0.006680985676328449, 1: 0.0, 2: 0.033118685429952395, 3: 0.006870621438574752}, 'fc4': {0: 0.1998178881426656, 1: 0.21001591250352414, 2: 0.18000822218238888, 3: 0.20641224026830607}, 'fo2': {0: 0.14073906987999535, 1: 0.15497017667940674, 2: 0.13787593145627178, 3: 0.1494289477779443}, 'fo3': {0: 0.010067223397787164, 1: 0.0004823988480574768, 2: 0.012236168122779147, 3: 0.003020692051963266}, 'fc2': {0: 0.030343744751683815, 1: 0.00797468512853949, 2: 0.037609280968441954, 3: 0.010536194759988581}, 'fs9': {0: 0.05806528480059931, 1: 0.11809074027652339, 2: 0.05757201672420531, 3: 0.08915668180228278}, 'fs10': {0: 0.10942048023561199, 1: 0.07331706574991534, 2: 0.07322600338434637, 3: 0.09380713040577611}, 'fl1': {0: 0.015888042855375723, 1: 0.007076199055435069, 2: 0.058491798275615216, 3: 0.014386124146600064}, 'fs2': {0: 0.059078818262670245, 1: 0.055045735824117384, 2: 0.04213229072611708, 3: 0.05698329249036179}, 'fs5': {0: 0.14073906987999535, 1: 0.15497017667940674, 2: 0.13787593145627178, 3: 0.1494289477779443}, 'fs6': {0: 0.010067223397787164, 1: 0.0004823988480574768, 2: 0.012236168122779147, 3: 0.003020692051963266}, 'fs8': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0}}, 86: {'fc1': {0: 0.2148356371565011, 1: 0.21708844420342896, 2: 0.21366345837819414, 3: 0.21798904252819098}, 'fc3': {0: 0.007926008267161787, 1: 0.00022671027146179928, 2: 0.03413087582015025, 3: 0.006566228979080377}, 'fc4': {0: 0.2079132473495195, 1: 0.20613948599634757, 2: 0.1860467693707155, 3: 0.21050673154066604}, 'fo2': {0: 0.15156106168569367, 1: 0.15380702359048803, 2: 0.14417056172498516, 3: 0.14610853516541072}, 'fo3': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0}, 'fc2': {0: 0.009902116827287139, 1: 0.013528017033866708, 2: 0.027616689007478667, 3: 0.013844273530377201}, 'fs9': {0: 0.09858807346752954, 1: 0.09522979588991275, 2: 0.04129680866881001, 3: 0.057612571294985544}, 'fc5': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0}, 'fs10': {0: 0.08648810172192666, 1: 0.09264547998136059, 2: 0.09784316005165247, 3: 0.12213603178582898}, 'fl1': {0: 0.014196160921592382, 1: 0.00785448193063608, 2: 0.05871854742841407, 3: 0.011913062095124624}, 'fs11': {0: 1.2054050358851705e-05, 1: 0.002009944279121332, 2: 0.003718671389834701, 3: 0.000340656834094452}, 'fo5': {0: 1.2054050358851705e-05, 1: 0.002009944279121332, 2: 0.003718671389834701, 3: 0.000340656834094452}, 'fs2': {0: 0.056352185663825834, 1: 0.05233246240585956, 2: 0.041876207645730294, 3: 0.06439819637525532}, 'fs3': {0: 0.000652237152551009, 1: 0.0033211865479070876, 2: 0.003029017399214852, 3: 0.0021354778714807}, 'fs5': {0: 0.15156106168569367, 1: 0.15380702359048803, 2: 0.14417056172498516, 3: 0.14610853516541072}}}
else:
    fault_mso_sensitivity = {10: {'fc3': {0: 0.013168985455804435, 1: 0.028984774398167993, 2: 0.032488202787092704, 3: 0.01152982309748458, 4: 0.0}, 'fc4': {0: 0.13514116454374359, 1: 0.08475568546372805, 2: 0.10505565558857474, 3: 0.05836739147156794, 4: 0.1368193851184636}, 'fl1': {0: 0.0163848599546877, 1: 0.04697844279285733, 2: 0.059387461009194994, 3: 0.02577084064607357, 4: 0.0}, 'fo2': {0: 0.09985234344041077, 1: 0.0, 2: 0.06413273927501506, 3: 0.01541700599597909, 4: 0.056679052339593874}, 'fo3': {0: 0.116224347909718, 1: 0.12748081919870108, 2: 0.08632399713706171, 3: 0.03862920239540191, 4: 0.11206314877889181}, 'fs2': {0: 0.035288821103332826, 1: 0.08475568546372805, 2: 0.04092291631355968, 3: 0.04295038547558885, 4: 0.0801403327788697}, 'fs3': {0: 0.08316242846728504, 1: 0.10552369157136224, 2: 0.11686914610324785, 3: 0.05946654990752684, 4: 0.10685915534454525}, 'fs5': {0: 0.09985234344041077, 1: 0.0, 2: 0.06413273927501506, 3: 0.01541700599597909, 4: 0.056679052339593874}, 'fs6': {0: 0.116224347909718, 1: 0.12748081919870108, 2: 0.08632399713706171, 3: 0.03862920239540191, 4: 0.11206314877889181}, 'fc2': {0: 0.21716945902763682, 1: 0.2660528114300998, 2: 0.23555352557422757, 3: 0.12062439899455328, 4: 0.23695260179075558}, 'fs9': {0: 0.049328798910150115, 1: 0.12786232526644856, 2: 0.10051057968417677, 3: 0.29233221327936265, 4: 0.06050446805062531}, 'fs10': {0: 0.018202099837102012, 1: 0.00012494521620593735, 2: 0.00829904011577209, 3: 0.02774280595746224, 4: 0.04123965467976906}, 'fs8': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.253123174387618, 4: 0.0}}, 16: {'fc1': {0: 0.49384447574726115, 1: 0.4954415596199193, 2: 0.4970322797140561, 3: 0.4853335497515736, 4: 0.4811650871336828}, 'fs2': {0: 0.0495746290882706, 1: 0.06789210973119668, 2: 0.03198065280414665, 3: 0.07142489171155976, 4: 0.015487537261002732}, 'fs3': {0: 0.13025345413569064, 1: 0.13897282688332455, 2: 0.12107324573728506, 3: 0.15530771943070815, 4: 0.13683241801305943}, 'fs5': {0: 0.14712306237420536, 1: 0.1543898498560078, 2: 0.2090757727995512, 3: 0.11458106522299905, 4: 0.18160073762445147}, 'fs6': {0: 0.14604865879502088, 1: 0.1282494233636596, 2: 0.12639412562760238, 3: 0.11232276906360034, 4: 0.12819012008352174}, 'fl1': {0: 0.03315571985955134, 1: 0.015054230545892121, 2: 0.014443923317358515, 3: 0.061030004819559086, 4: 0.05672409988428197}}, 30: {'fc1': {0: 0.23588058328221415, 1: 0.24756926609652138, 2: 0.25834508621787583, 3: 0.22855022569711117, 4: 0.26130008163908325}, 'fc5': {0: 0.0001110429186041892, 1: 0.004631748147031716, 2: 0.002166868252718735, 3: 9.37789340567761e-05, 4: 0.0026301894741569457}, 'fc3': {0: 0.03168966393759369, 1: 0.02710917432315916, 2: 0.00370027585673827, 3: 0.015119130003925025, 4: 0.019783480543327646}, 'fc4': {0: 0.04511885527771488, 1: 0.05917759107615751, 2: 0.07734058482648073, 3: 0.05636526994822994, 4: 0.06632823179665583}, 'fo2': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0}, 'fo3': {0: 0.08376199233638423, 1: 0.09738600337790146, 2: 0.09211673481623207, 3: 0.10195407863605917, 4: 0.07977715785210795}, 'fc2': {0: 0.1926285042879553, 1: 0.20110550039673838, 2: 0.18156604545586616, 3: 0.18976160454708976, 4: 0.19677131320764146}, 'fs8': {0: 0.06428565953668434, 1: 0.08371052801577826, 2: 0.03622578258537306, 3: 0.0968668760814378, 4: 0.003519728257490961}, 'fs10': {0: 0.07884240828443732, 1: 0.0, 2: 0.0843263916613822, 3: 0.06752590151699743, 4: 0.08617606557296814}, 'fl1': {0: 0.050928279607120104, 1: 0.03691650304486881, 2: 0.00370027585673827, 3: 0.017663517532548405, 4: 0.036175203799209514}, 'fs2': {0: 0.04511885527771488, 1: 0.05917759107615751, 2: 0.07734058482648073, 3: 0.05636526994822994, 4: 0.06632823179665583}, 'fs3': {0: 0.08776111999858859, 1: 0.08119834292075272, 2: 0.08888776657516308, 3: 0.06768648958419869, 4: 0.09880296873443761}, 'fs6': {0: 0.08376199233638423, 1: 0.09738600337790146, 2: 0.09211673481623207, 3: 0.10195407863605917, 4: 0.07977715785210795}, 'fs12': {0: 0.0001110429186041892, 1: 0.004631748147031716, 2: 0.002166868252718735, 3: 9.37789340567761e-05, 4: 0.0026301894741569457}}, 41: {'fc1': {0: 0.2580967234120442, 1: 0.23527401651368288, 2: 0.23784183872402828, 3: 0.2650821415725612, 4: 0.16689834534563636}, 'fl1': {0: 0.02636062425201941, 1: 0.022363717985418457, 2: 0.008232131228617889, 3: 0.0, 4: 0.012728527010671077}, 'fc3': {0: 0.020101007407966935, 1: 0.01883382227902653, 2: 0.006690681209231249, 3: 0.0, 4: 0.003471219012072393}, 'fc4': {0: 0.10567400366706114, 1: 0.10130790464600382, 2: 0.12790232786831754,
        3: 0.12182939712483543, 4: 0.0802482333377426}, 'fo2': {0: 0.10567400366706114, 1: 0.10130790464600382, 2: 0.12790232786831754, 3: 0.12182939712483543, 4: 0.0802482333377426}, 'fo3': {0: 0.07331494226683923, 1: 0.07407039331853531, 2: 0.053041384738213376, 3: 0.07882858430193233, 4: 0.032246768623842056}, 'fc2': {0: 0.15487854579134644, 1: 0.1479977690832307, 2: 0.11118203185781686, 3: 0.1470285111317509, 4: 0.09037438472411703}, 'fs9': {0: 0.0, 1: 0.010726679929080045, 2: 0.0, 3: 0.0, 4: 0.15980157737615955}, 'fs8': {0: 0.0040570711903858666, 1: 0.054572634671221205, 2: 0.08518939594780649, 3: 0.0, 4: 0.21565553747340543}, 'fs1': {0: 5.9717772841907174e-06, 1: 0.001801036120506128, 2: 0.005717491853009146, 3: 0.0003198271715234499, 4: 0.000686136411573389}, 'fs3': {0: 0.07284816063409139, 1: 0.05636582284275182, 2: 0.05535667609811075, 3: 0.06442416014579351, 4: 0.04514603538545303}, 'fs5': {0: 0.10567400366706114, 1: 0.10130790464600382, 2: 0.12790232786831754, 3: 0.12182939712483543, 4: 0.0802482333377426}, 'fs6': {0: 0.07331494226683923, 1: 0.07407039331853531, 2: 0.053041384738213376, 3: 0.07882858430193233, 4: 0.032246768623842056}}, 52: {'fc1': {0: 0.21486807070454367, 1: 0.21569122572177468, 2: 0.2172869027056597, 3: 0.20700916764110883, 4: 0.2166505290712239}, 'fc3': {0: 0.031755561209385774, 1: 0.00590697215013609, 2: 0.01376413876087217, 3: 0.018799909139042805, 4: 0.0037998296805206253}, 'fc4': {0: 0.18742699756470102, 1: 0.20132281499294716, 2: 0.19502312278490863, 3: 0.19832878081859598, 4: 0.21164282648207677}, 'fo2': {0: 0.15022458047508278, 1: 0.15384963082010325, 2: 0.15076630812915787, 3: 0.1590902881869205, 4: 0.15406563116070915}, 'fo3': {0: 0.002101922388777373, 1: 0.004872960814249948, 2: 0.0037819504788529773, 3: 0.0, 4: 0.0013008167376507029}, 'fc2': {0: 0.028365765716083697, 1: 0.01563077552770574, 2: 0.023304699835601277, 3: 0.009352204866249826, 4: 0.005739857804703433}, 'fs9': {0: 0.05093113318433347, 1: 0.08344435979089344, 2: 0.06658499239788743, 3: 0.12939830465110447, 4: 0.026369054333967187}, 'fs10': {0: 0.08770233684316289, 1: 0.097683062310279, 2: 0.09843684344052801, 3: 0.05102032912769146, 4: 0.14121611469365203}, 'fl1': {0: 0.057094711960451044, 1: 0.015402422064713647, 2: 0.032245968202770245, 3: 0.02748029596155565, 4: 0.007506715532017081}, 'fs2': {0: 0.03720241708961825, 1: 0.04747318417284392, 2: 0.044256814655750765, 3: 0.03923849263167546, 4: 0.05757719532136761}, 'fs5': {0: 0.15022458047508278, 1: 0.15384963082010325, 2: 0.15076630812915787, 3: 0.1590902881869205, 4: 0.15406563116070915}, 'fs6': {0: 0.002101922388777373, 1: 0.004872960814249948, 2: 0.0037819504788529773, 3: 0.0, 4: 0.0013008167376507029}, 'fs8': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0011919387891346305, 4: 0.018764981283751713}}, 86: {'fc1': {0: 0.26399602789571475, 1: 0.2343565497751524, 2: 0.2386676794667578, 3: 0.22866686966413358, 4: 0.29357100646663625}, 'fc3': {0: 0.009811095320732863, 1: 0.0018485311395182533, 2: 0.023014563010698916, 3: 0.012361731764613736, 4: 0.012240235578873186}, 'fc4': {0: 0.10401586895675931, 1: 0.17881559602834465, 2: 0.06318843111654912, 3: 0.10001853605462005, 4: 0.10326989098685224}, 'fo2': {0: 0.04451929600752442, 1: 0.10710805749710707, 2: 0.027790332247016793, 3: 0.03687180637909654, 4: 0.021247603412294248}, 'fo3': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0}, 'fc2': {0: 0.18334402576437184, 1: 0.06952757890260819, 2: 0.20448547323161076, 3: 0.15545133811428583, 4: 0.2144080767460622}, 'fs9': {0: 0.11652172448129894, 1: 0.1583698542810033, 2: 0.14537196909188616, 3: 0.12688705504547257, 4: 0.02224043894849313}, 'fc5': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0}, 'fs10': {0: 0.0, 1: 0.0, 2: 0.02702089945466387, 3: 0.051880099367149594, 4: 0.02491350155070486}, 'fl1': {0: 0.05627426820144159, 1: 0.019149082332662885, 2: 0.0807101883008026, 3: 0.0555211989060951, 4: 0.08010539004388606}, 'fs11': {0: 0.001992419178575095, 1: 0.006884375730797792, 2: 0.004389204951680034, 3: 0.023416981090940456, 4: 0.0011490021322871974}, 'fo5': {0: 0.001992419178575095, 1: 0.006884375730797792, 2: 0.004389204951680034, 3: 0.023416981090940456, 4: 0.0011490021322871974}, 'fs2': {0: 0.0594965729492349, 1: 0.07170753853123757, 2: 0.03539809886953232, 3: 0.0631467296755235, 4: 0.082022287574558}, 'fs3': {0: 0.11351698605824667, 1: 0.03824040255366312, 2: 0.11778362306010502, 3: 0.08548886646803218, 4: 0.12243596101477117}, 'fs5': {0: 0.04451929600752442, 1: 0.10710805749710707, 2: 0.027790332247016793, 3: 0.03687180637909654, 4: 0.021247603412294248}}}

# d=["2021-05-25T12:30:00.000Z","2021-05-26T09:30:00.000Z"] #val 1
# d=["2021-05-26T10:00:00.000Z","2021-05-27T13:00:00.000Z"] #obstruction
# d=["2021-05-28T14:00:00.000Z","2021-05-29T14:00:00.000Z"] #High Temp
# d=["2021-06-01T01:00:00.000Z","2021-06-04T10:00:00.000Z"]

# dates_goal=[["2021-05-25T12:30:00.000Z","2021-05-26T09:30:00.000Z"],
#            ["2021-05-26T10:00:00.000Z","2021-05-27T13:00:00.000Z"],
#            ["2021-05-28T14:00:00.000Z","2021-05-29T14:00:00.000Z"],
#            ["2021-05-31T08:30:00.000Z","2021-06-01T12:00:00.000Z"],
#            ["2021-06-01T12:00:00.000Z","2021-06-03T07:50:00.000Z"],
#            ["2021-06-03T07:50:00.000Z","2021-06-03T11:40:00.000Z"]]
sensors={"1":"ControlRegCompAC.VarFrequencyHzMSK","2":"EbmpapstFan_1_Mng.InfoSpeed_EBM_1.CurrSpeed","3":"Data_EVD_Emb_1.EVD.Variables.EEV_PosPercent.Val","7":"WaterFlowMeter","8":"SuctSH_Circ1","9":"DscgTempCirc1","12":"EvapTempCirc1","13":"CondTempCirc1","16":"W_OutTempUser","17":"W_OutTempEvap","18":"W_InTempUser","20":"FiltPress","23":"PumpPress","24":"ExtTemp"}
var_names=['ControlRegCompAC.VarFrequencyHzMSK',
 'EbmpapstFan_1_Mng.InfoSpeed_EBM_1.CurrSpeed',
 'Data_EVD_Emb_1.EVD.Variables.EEV_PosPercent.Val',
 'WaterFlowMeter',
 'SuctSH_Circ1',
 'DscgTempCirc1',
 'EvapTempCirc1',
 'CondTempCirc1',
 'W_OutTempUser',
 'W_OutTempEvap',
 'W_InTempUser',
 'FiltPress',
 'PumpPress',
 'ExtTemp']


dates_goal = [["2021-05-25T12:45:00.000Z","2021-05-26T00:10:00.000Z"]]#["2021-05-19T16:30:00.000Z","2021-05-26T08:30:00.000Z"]
names_analysis = ['models_error', 'low_bounds', 'high_bounds',
    'activations', 'confidence', 'group_prob', 'timestamp']
host = '137.116.224.197:9200'
client = Elasticsearch(hosts=[host])
# data_issue=get_analytics(client,d[0],d[1],device,v,names_analysis)
data_iss = []
for d in dates_goal:
    data_iss.append(get_analytics(
        client, d[0], d[1], device, v, names_analysis))
mso_set = [10, 16, 30, 41, 52, 86]
faults = {1: 'fc1', 2: 'fc2', 3: 'fc3', 4: 'fc4', 6: 'fc5', 8: 'fl1', 10: 'fo2', 11: 'fo3', 12: 'fo4', 13: 'fo5',
    19: 'fs1', 20: 'fs2', 21: 'fs3', 22: 'fs5', 23: 'fs6', 24: 'fs8', 25: 'fs9', 26: 'fs10', 27: 'fs11', 28: 'fs12'}
fault_signature_matrix = [[0, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1], [0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [
    0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0], [1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 1], [1, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0], [1, 0, 1, 1, 1, 0], [1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0]]
priori = np.ones(len(faults))/len(faults)

training_data_stats={'CondTempCirc1': {'count': 119999.0, 'mean': 35.40744006200052, 'std': 8.90832861902754, 'min': 21.7, '25%': 28.6, '50%': 33.5, '75%': 39.6, 'max': 61.9}, 'ControlRegCompAC.VarFrequencyHzMSK': {'count': 119999.0, 'mean': 117.20713672613937, 'std': 48.016148138679334, 'min': 0.0, '25%': 79.0, '50%': 114.6, '75%': 157.6, 'max': 200.0}, 'Data_EVD_Emb_1.EVD.Variables.EEV_PosPercent.Val': {'count': 119999.0, 'mean': 59.985982383186524, 'std': 25.939489172746487, 'min': 0.0, '25%': 41.3, '50%': 59.4, '75%': 80.0, 'max': 100.0}, 'DscgTempCirc1': {'count': 119999.0, 'mean': 64.29948166234719, 'std': 13.256771386645704, 'min': 39.7, '25%': 53.6, '50%': 62.3, '75%': 74.2, 'max': 101.3}, 'EbmpapstFan_1_Mng.InfoSpeed_EBM_1.CurrSpeed': {'count': 119999.0, 'mean': 113.43869365578045, 'std': 17.538777345983736, 'min': 0.0, '25%': 107.3, '50%': 113.4, '75%': 120.6, 'max': 163.7}, 'EvapTempCirc1': {'count': 119999.0, 'mean': 6.837542812856774, 'std': 10.973930126348929, 'min': -18.6, '25%': -2.5, '50%': 8.8, '75%': 17.1, 'max': 27.0}, 'ExtTemp': {'count': 119999.0, 'mean': 27.026118550987924, 'std': 9.114370111131533, 'min': 17.4, '25%': 22.0, '50%': 22.9, '75%': 24.6, 'max': 53.2}, 'FiltPress': {'count': 119999.0, 'mean': 0.5030391919932666, 'std': 0.22608007119671195, 'min': 0.1, '25%': 0.3, '50%': 0.5, '75%': 0.7, 'max': 0.9}, 'PumpPress': {'count': 119999.0, 'mean': 4.333651113759282, 'std': 0.15663738666291355, 'min': 4.0, '25%': 4.2, '50%': 4.3, '75%': 4.5, 'max': 4.6}, 'SuctSH_Circ1': {'count': 119999.0, 'mean': 9.598460820506837, 'std': 5.357339488874387, 'min': 1.1, '25%': 6.3, '50%': 7.6, '75%': 9.9, 'max': 33.5}, 'UnitStatus': {'count': 119999.0, 'mean': 9.0, 'std': 0.0, 'min': 9.0, '25%': 9.0, '50%': 9.0, '75%': 9.0, 'max': 9.0}, 'W_InTempUser': {'count': 119999.0, 'mean': 17.239367828065234, 'std': 14.581572713808185, 'min': -10.6, '25%': 4.7, '50%': 17.1, '75%': 29.2, 'max': 51.7}, 'W_OutTempEvap': {'count': 119999.0, 'mean': 12.814576788139899, 'std': 13.394501890590526, 'min': -12.3, '25%': 1.3, '50%': 12.6, '75%': 24.1, 'max': 39.5}, 'W_OutTempUser': {'count': 119999.0, 'mean': 13.341140342836189, 'std': 13.105144081605985, 'min': -11.2, '25%': 2.3, '50%': 13.0, '75%': 24.2, 'max': 39.4}, 'WaterFlowMeter': {'count': 119999.0, 'mean': 46.13294277452312, 'std': 12.478756683077693, 'min': 21.1, '25%': 33.3, '50%': 47.3, '75%': 58.5, 'max': 69.0}}
bins={}
bin_size=50
labels=[]
for i in range(bin_size):
    labels.append(i)
for var in var_names:
    bb=[training_data_stats[var]['min']-1000*training_data_stats[var]['std']+(i/(bin_size-1))*(training_data_stats[var]['max']-training_data_stats[var]['min'])]
    for i in range(bin_size-1):
        bb.append(training_data_stats[var]['min']+(i/(bin_size-1))*(training_data_stats[var]['max']-training_data_stats[var]['min']))
    bb.append(training_data_stats[var]['min']+1000*training_data_stats[var]['std']+((i+1)/(bin_size-1))*(training_data_stats[var]['max']-training_data_stats[var]['min']))                 
    bins[var]= bb
if True:
    activations = []
    confidences = []
    error = []
    high = []
    low = []
    groups = []
    telemetry ={}
    for i in range(len(mso_set)):
        for d in range(len(data_iss)):
            if d == 0:
                activations.append(data_iss[d][i]['activations'])
                confidences.append(data_iss[d][i]['confidence'])
                error.append(data_iss[d][i]['models_error'])
                high.append(data_iss[d][i]['high_bounds'])
                low.append(data_iss[d][i]['low_bounds'])
                groups.append(data_iss[d][i]['group_prob'])
            else:
                activations[i] = activations[i]+data_iss[d][i]['activations']
                confidences[i] = confidences[i]+data_iss[d][i]['confidence']
                error[i] = error[i]+data_iss[d][i]['models_error']
                high[i] = high[i]+data_iss[d][i]['high_bounds']
                low[i] = low[i]+data_iss[d][i]['low_bounds']
                groups[i] = groups[i]+data_iss[d][i]['group_prob']

    times = data_iss[0][0]['timestamp']
    for d in data_iss[1:]:
        times = times+d[0]['timestamp']
    first=True
    for d in dates_goal:
        if first:
            first=False
            for var in var_names:
                client = Elasticsearch(hosts=[host])
                elm=get_telemetry(client,d[0],d[1],device,var)
                keep=pd.DataFrame(list(elm.keys())).isin(times)
                telemetry[var]=pd.DataFrame(list(elm.values()))[keep.values]
        else:
            for var in var_names:
                client = Elasticsearch(hosts=[host])
                elm=get_telemetry(client,d[0],d[1],device,var)
                keep=pd.DataFrame(list(elm.keys())).isin(times)
                telemetry[var]=telemetry[var].append(pd.DataFrame(list(elm.values()))[keep.values],ignore_index=True)

#create the joint tables
joint={}
for var in var_names:
    joint[var]=pd.DataFrame({var:pd.cut(telemetry[var].values[:,0],bins[var],labels=labels),'MSO_0':activations[0],'MSO_1':activations[1],'MSO_2':activations[2],'MSO_3':activations[3],'MSO_4':activations[4],'MSO_5':activations[5]})
  
# get the conditional probabilities for activations only (each var and each MSO)
N_appear=joint[var_names[0]][var_names[0]].shape[0]
joint_results={}
for var in var_names:
    joint_results[var]={}
    N_appear=joint[var].shape[0]
    for i in range(len(mso_set)):
        name='MSO_'+str(i)
        joint_results[var][name]={}
        subset=joint[var].loc[joint[var][name]==1]
        joint_results[var][name]['Total_MSO_activ']=subset.shape[0]
        a = subset[var].unique()
        for j in a:
            if j==0:
                interval='-Inf to '+str(np.round(bins[var][j+1],decimals=2))
            elif j==len(labels):
                interval=str(np.round(bins[var][j],decimals=2))+' to +Inf'
            else:
                interval=str(np.round(bins[var][j],decimals=2))+' to '+str(np.round(bins[var][j+1],decimals=2))
            joint_results[var][name][interval]={}
            joint_results[var][name][interval]['Legend_index']=j
            joint_results[var][name][interval]['Activations_%']=subset.loc[joint[var][var]==j].shape[0]*100/joint_results[var][name]['Total_MSO_activ']
            joint_results[var][name][interval]['P_joint']=subset.loc[joint[var][var]==j].shape[0]/N_appear
            joint_results[var][name][interval]['P_var']=joint[var].loc[joint[var][var]==j].shape[0]/N_appear
            joint_results[var][name][interval]['P_cond']=joint_results[var][name][interval]['P_joint']/joint_results[var][name][interval]['P_var']
    
# make matrices and plot heatmaps for each MSO
traductor={'CondTempCirc1':'CondT', 'Data_EVD_Emb_1.EVD.Variables.EEV_PosPercent.Val':'EEV','DscgTempCirc1':'DechT', 
                     'EbmpapstFan_1_Mng.InfoSpeed_EBM_1.CurrSpeed':'Ven','EvapTempCirc1':'EvapT', 'ExtTemp':'ExT', 
                     'FiltPress':'FP', 'ControlRegCompAC.VarFrequencyHzMSK':'Com','PumpPress':'PP', 'SubCoolCir1':'SbCoT', 
                     'SuctSH_Circ1':'SucTh', 'W_InTempUser':'Win','W_OutTempEvap':'Wev', 'W_OutTempUser':'Wout', 
                     'WaterFlowMeter':'Wfl'}
root=r'V:\PL\Projects\Shared\LAUDA Cloud\LUC - Industrial PhD\Follow Up\Meetings\Figures MSO trace back Analysis\D_Full_Training_Set_UC14'#D_Cond_Obstruction_UC14'#D_Full_Training_Set_UC14+dates_goal[0][0][:13]
y_labe=[]
for var in var_names:
    y_labe.append(traductor[var])
# plot prob of each value in the timeframe selected
matr_prbs=np.zeros([len(var_names),len(labels)])
i=-1
for var in var_names:
    i=i+1
    for j in labels:
        matr_prbs[i,j]=np.round(joint[var].loc[joint[var][var]==j].shape[0]*100/N_appear,decimals=3)

fig = plt.figure(figsize=(15.0, 15.0))
sns.heatmap(matr_prbs,cmap='Spectral',annot=False,xticklabels=labels,yticklabels=y_labe,norm=LogNorm(),square=True, linewidth=0.1, linecolor='silver',cbar_kws = dict(use_gridspec=False,location="bottom"))
plt.title('Probability distribution of the different variables (%)')
file=r"\Probabilities.png"
#fig.savefig(root+file)
plt.show()
# plot cond for each mso
mtr_condactiv_fault={}
mtr_perc_activ={}
fig = plt.figure(figsize=(15.0, 15.0))
for n in range(len(mso_set)):       
    name='MSO_'+str(n)
    matr=np.zeros([len(var_names),len(labels)])
    mtr_perc_activ[name]=np.zeros([len(var_names),len(labels)])
    i=-1
    for var in var_names:
        i=i+1
        for j in labels:
            if j==0:
                interval='-Inf to '+str(np.round(bins[var][j+1],decimals=2))
            elif j==len(labels):
                interval=str(np.round(bins[var][j],decimals=2))+' to +Inf'
            else:
                interval=str(np.round(bins[var][j],decimals=2))+' to '+str(np.round(bins[var][j+1],decimals=2))
            if interval in joint_results[var][name]:
                
                matr[i,j]=np.round(joint_results[var][name][interval]['P_cond']*100,decimals=3)
                mtr_perc_activ[name][i,j]=joint_results[var][name][interval]['Activations_%']
            else:
                matr[i,j]=0
    mtr_condactiv_fault[name]=matr
    ax1 = fig.add_subplot(3,2,n+1)
    if sum(sum(matr))>0:
        sns.heatmap(matr,cmap='Spectral',annot=False,xticklabels=labels,yticklabels=y_labe,norm=LogNorm(),square=True, linewidth=0.1,linecolor='silver',cbar_kws = dict(use_gridspec=False,location="bottom"))
    plt.title(name)
    #file=r"\Conditional_Probability_"+name+".png"
    #fig.savefig(root+file)
fig.suptitle(' Conditional Probability of Activations (%)')
plt.show()
                
            
# get the conditional probabilities for confidences only (each var and each MSO)  
#create the joint tables
joint={}
for var in var_names:
    joint[var]=pd.DataFrame({var:pd.cut(telemetry[var].values[:,0],bins[var],labels=labels),'MSO_0':confidences[0],'MSO_1':confidences[1],'MSO_2':confidences[2],'MSO_3':confidences[3],'MSO_4':confidences[4],'MSO_5':confidences[5]})
  
# get the conditional probabilities for activations only (each var and each MSO)
N_appear=joint[var_names[0]][var_names[0]].shape[0]
joint_results={}
for var in var_names:
    joint_results[var]={}
    N_appear=joint[var].shape[0]
    for i in range(len(mso_set)):
        name='MSO_'+str(i)
        joint_results[var][name]={}
        a = joint[var][var].unique()
        for j in a:
            if j==0:
                interval='-Inf to '+str(np.round(bins[var][j+1],decimals=2))
            elif j==len(labels):
                interval=str(np.round(bins[var][j],decimals=2))+' to +Inf'
            else:
                interval=str(np.round(bins[var][j],decimals=2))+' to '+str(np.round(bins[var][j+1],decimals=2))
            joint_results[var][name][interval]={}
            joint_results[var][name][interval]['Legend_index']=j
            
            subset=joint[var].loc[joint[var][var]==j]
            joint_results[var][name][interval]['C_mean']=subset[name].describe()['mean']
            joint_results[var][name][interval]['P_var']=joint[var].loc[joint[var][var]==j].shape[0]/N_appear
            joint_results[var][name][interval]['C_std']=subset[name].describe()['std']

mtr_mean_fault={}
mtr_std_fault={}
fig = plt.figure(figsize=(15.0, 15.0))
for n in range(len(mso_set)):       
    name='MSO_'+str(n)
    matr_mean=np.zeros([len(var_names),len(labels)])
    matr_std=np.zeros([len(var_names),len(labels)])
    i=-1
    for var in var_names:
        i=i+1
        for j in labels:
            if j==0:
                interval='-Inf to '+str(np.round(bins[var][j+1],decimals=2))
            elif j==len(labels):
                interval=str(np.round(bins[var][j],decimals=2))+' to +Inf'
            else:
                interval=str(np.round(bins[var][j],decimals=2))+' to '+str(np.round(bins[var][j+1],decimals=2))
            if interval in joint_results[var][name]:
                matr_mean[i,j]=np.round(joint_results[var][name][interval]['C_mean'],decimals=3)
                matr_std[i,j]=np.round(joint_results[var][name][interval]['C_std'],decimals=3)
            else:
                matr_mean[i,j]=0
                matr_std[i,j]=0
    mtr_mean_fault[name]=matr_mean
    mtr_std_fault[name]=matr_std
        
    
    
    ax1 = fig.add_subplot(3,2,n+1)
    sns.heatmap(matr_mean,cmap=sns.color_palette("light:b", as_cmap=True),annot=False,xticklabels=labels,yticklabels=y_labe, linewidth=0.1,linecolor='silver')
    ax1.title.set_text(name)
    #ax1 = fig.add_subplot(2,1,2)
    #sns.heatmap(matr_std,cmap=sns.color_palette("light:b", as_cmap=True),annot=False,xticklabels=labels,yticklabels=y_labe, linewidth=0.1,linecolor='silver')
    #ax1.title.set_text(name+' Confidence STD')
    #ax1 = fig.add_subplot(3,1,3)
    #sns.heatmap(matr_cl,cmap='Spectral',annot=False,xticklabels=labels,yticklabels=y_labe, linewidth=0.1,linecolor='silver')
    #ax1.title.set_text(name+' Confidence Clustering (K-Means)')
    #file=r"\Confidence_Clust_"+name+".png"
    #fig.savefig(root+file)

fig.suptitle('Mean Confidence')
plt.show()
    ################       Comparison and identification        #################
def get_cond_activ_mtrs(joint_results,mso_set,labels,var_names,bins):
    mtr_condactiv={}
    for n in range(len(mso_set)):       
        name='MSO_'+str(n)
        matr=np.zeros([len(var_names),len(labels)])
        i=-1
        for var in var_names:
            i=i+1
            for j in labels:
                if j==0:
                    interval='-Inf to '+str(np.round(bins[var][j+1],decimals=2))
                elif j==len(labels):
                    interval=str(np.round(bins[var][j],decimals=2))+' to +Inf'
                else:
                    interval=str(np.round(bins[var][j],decimals=2))+' to '+str(np.round(bins[var][j+1],decimals=2))
                if interval in joint_results[var][name]:
                    matr[i,j]=np.round(joint_results[var][name][interval]['P_cond']*100,decimals=3)
                else:
                    matr[i,j]=0
        mtr_condactiv[name]=matr
    return mtr_condactiv

def get_mean_std_mtrs(joint_results,mso_set,labels,var_names,bins):
    mtr_mean_set={}
    mtr_std_set={}
    for n in range(len(mso_set)):       
        name='MSO_'+str(n)
        matr_mean=np.zeros([len(var_names),len(labels)])
        matr_std=np.zeros([len(var_names),len(labels)])
        i=-1
        for var in var_names:
            i=i+1
            for j in labels:
                if j==0:
                    interval='-Inf to '+str(np.round(bins[var][j+1],decimals=2))
                elif j==len(labels):
                    interval=str(np.round(bins[var][j],decimals=2))+' to +Inf'
                else:
                    interval=str(np.round(bins[var][j],decimals=2))+' to '+str(np.round(bins[var][j+1],decimals=2))
                if interval in joint_results[var][name]:
                    matr_mean[i,j]=np.round(joint_results[var][name][interval]['C_mean'],decimals=3)
                    matr_std[i,j]=np.round(joint_results[var][name][interval]['C_std'],decimals=3)
                else:
                    matr_mean[i,j]=0
                    matr_std[i,j]=0
        mtr_mean_set[name]=matr_mean
        mtr_std_set[name]=matr_std
    
    return mtr_mean_set,mtr_std_set

#get the best value for a moving average of the size of 20% of the cells >0 in the prob matr
def moving_average_variables(matr,matr_prb,var_names,wind_ratio=0.20):
    key_intervals={}
    best_array=[]
    for i in range(matr.shape[0]):
        best=-1
        pos=0
        wind=int(np.where(matr_prbs[i]>0)[0].shape[0]*wind_ratio)
        if wind%2==0:
            wind=wind+1
        half=int((wind-1)/2)
        if half>=1:
            for j in range(half,matr.shape[1]-half):
                mean=sum(matr[i,j-half:j+half+1])/wind
                if mean>best:
                    best=mean
                    pos=j
            best_array.append(best)
            key_intervals[var_names[i]]={'score':best,'window':wind,'position':pos}
        else:
            key_intervals[var_names[i]]={'score':'too narrow to evaluate'}
    return key_intervals,best_array
        

# to load and compare vs training baseline
root=r'V:\PL\Projects\Shared\LAUDA Cloud\LUC - Industrial PhD\Follow Up\Meetings\Figures MSO trace back Analysis\D_Full_Training_Set_UC14'
if bin_size==50:
    cond_train_file=root+'\joint_cond_activ_prob_trainingUC14.pkl'
    means_train_file=root+'\joint_confidence_means_trainingUC14.pkl'
    probs_train_file=root+'\prob_dist_trainingUC14.pkl'
else:    
    cond_train_file=root+'\joint_cond_activ_prob_trainingUC14_150bins.pkl'
    means_train_file=root+'\joint_confidence_means_trainingUC14_150bins.pkl'
    probs_train_file=root+'\prob_dist_trainingUC14_150bins.pkl'
filehandler = open(cond_train_file, 'rb') 
cond_train_joint_res = pickle.load(filehandler)
filehandler.close()
filehandler = open(means_train_file, 'rb') 
means_train_joint_res = pickle.load(filehandler)
filehandler.close()
filehandler = open(probs_train_file, 'rb') 
probs_train_mtr = pickle.load(filehandler)
filehandler.close()


mtr_condactiv_train=get_cond_activ_mtrs(cond_train_joint_res,mso_set,labels,var_names,bins)
mtr_mean_train,mtr_std_train=get_mean_std_mtrs(means_train_joint_res,mso_set,labels,var_names,bins)

if False:
    fig = plt.figure(figsize=(15.0, 15.0))
    for n in range(len(mso_set)):
        name='MSO_'+str(n)
        
        ax1 = fig.add_subplot(3,2,n+1)
        #sns.heatmap(mtr_condactiv_fault[name],cmap='Spectral',annot=False,xticklabels=labels,norm=LogNorm(),yticklabels=y_labe, linewidth=0.1,linecolor='silver',cbar_kws = dict(label='Cond. Prob. of Activations')) #,cbar_kws={'label': 'Cond. Prob. of Activations','location'="right"}
        #ax1.title.set_text(name)
        #ax1 = fig.add_subplot(3,2,2)
        sns.heatmap(corrected_cond[name],cmap='Spectral',annot=False,xticklabels=labels,norm=LogNorm(),yticklabels=y_labe, linewidth=0.1,linecolor='silver')#,cbar_kws = dict(label='Confidence Mean')
        ax1.title.set_text(name)
        #ax1 = fig.add_subplot(3,2,3)
        #sns.heatmap(mtr_std_train[name],cmap='Spectral',annot=False,xticklabels=labels,norm=LogNorm(),yticklabels=y_labe, linewidth=0.1,linecolor='silver',cbar_kws = dict(label='Confidence STD'))
        #ax1.title.set_text(name+' Confidence STD')
        #ax1 = fig.add_subplot(3,1,3)
        #sns.heatmap(matr_cl,cmap='Spectral',annot=False,xticklabels=labels,yticklabels=y_labe, linewidth=0.1,linecolor='silver')
        #ax1.title.set_text(name+' Confidence Clustering (K-Means)')
        #file=r"\Confidence_Clust_"+name+".png"
        #fig.savefig(root+file)
    fig.suptitle("Corrected Conditional Prob.")
    plt.show()
    
# 1) correct baseline -- When we have a high ratio of the prob in training vs test we want to push the baseline value since it might be an artifact 
R=np.clip(np.nan_to_num(0.5+np.sqrt(probs_train_mtr/matr_prbs)),0.5,1.5)
fig = plt.figure(figsize=(15.0, 15.0))
sns.heatmap(R,cmap='Spectral',annot=False,xticklabels=labels,yticklabels=y_labe,square=True, linewidth=0.1, linecolor='silver',cbar_kws = dict(use_gridspec=False,location="bottom"))
plt.title('Coefficients to correct Baseline values')
file=r"\Probabilities.png"
#fig.savefig(root+file)
plt.show()

corrected_cond={}
corrected_mean={}
corrected_std={}
for n in range(len(mso_set)):
    name='MSO_'+str(n)
    corrected_cond[name]=np.round(np.clip(mtr_condactiv_fault[name]-R*mtr_condactiv_train[name],0.0,None),decimals=3)
    corrected_mean[name]=np.round(np.clip(mtr_mean_fault[name]-R*mtr_mean_train[name],0.0,None),decimals=3)
    corrected_std[name]=np.round(np.nan_to_num(np.clip(mtr_std_fault[name]/(R+mtr_std_train[name]),0.0,None)),decimals=3)
for n in range(len(mso_set)):
    name='MSO_'+str(n)
    try:
        fig = plt.figure(figsize=(15.0, 15.0))
        ax1 = fig.add_subplot(3,2,1)
        sns.heatmap(mtr_condactiv_fault[name],cmap='Spectral',annot=False,norm=LogNorm(),yticklabels=y_labe, linewidth=0.1,linecolor='silver',cbar_kws = dict(label='Cond. Prob. of Activations')) #,cbar_kws={'label': 'Cond. Prob. of Activations','location'="right"}
        #ax1.title.set_text(name+' Conditional prob of Activations')
        ax1 = fig.add_subplot(3,2,3)
        sns.heatmap(mtr_mean_fault[name],cmap='Spectral',annot=False,norm=LogNorm(),yticklabels=y_labe, linewidth=0.1,linecolor='silver',cbar_kws = dict(label='Confidence Mean'))
        #ax1.title.set_text(name+' Confidence Mean')
        ax1 = fig.add_subplot(3,2,5)
        sns.heatmap(mtr_std_fault[name],cmap='Spectral',annot=False,norm=LogNorm(),yticklabels=y_labe, linewidth=0.1,linecolor='silver',cbar_kws = dict(label='Confidence STD'))
        ax1 = fig.add_subplot(3,2,2)
        sns.heatmap(corrected_cond[name],cmap='Spectral',annot=False,norm=LogNorm(),yticklabels=y_labe, linewidth=0.1,linecolor='silver',cbar_kws = dict(label='Adapted Cond. Prob. of Activations')) #,cbar_kws={'label': 'Cond. Prob. of Activations','location'="right"}
        #ax1.title.set_text(name+' Conditional prob of Activations')
        ax1 = fig.add_subplot(3,2,4)
        sns.heatmap(corrected_mean[name],cmap='Spectral',annot=False,norm=LogNorm(),yticklabels=y_labe, linewidth=0.1,linecolor='silver',cbar_kws = dict(label='Adapted Confidence Mean'))
        #ax1.title.set_text(name+' Confidence Mean')
        ax1 = fig.add_subplot(3,2,6)
        sns.heatmap(corrected_std[name],cmap='Spectral',annot=False,norm=LogNorm(),yticklabels=y_labe, linewidth=0.1,linecolor='silver',cbar_kws = dict(label='Adapted Confidence STD'))
        fig.suptitle("Comparison of Raw vs Baseline Adjustment "+name)
        plt.show()
    except:
        print('Error in printing:  '+name)
    
# 2) Identify relevant parts 
# at mso level, start by getting the ratios Pcond 
ratio_cond={}
ratio_mean={}
ratio_std={}
for n in range(len(mso_set)):
    name='MSO_'+str(n)
    ratio_cond[name]=np.round(np.nan_to_num(corrected_cond[name]*(matr_prbs**0.75)),decimals=4)
    ratio_mean[name]=np.round(np.nan_to_num(corrected_mean[name]*(matr_prbs**0.75)),decimals=4)
    ratio_std[name]=np.round(np.nan_to_num(corrected_std[name]*(matr_prbs**0.75)),decimals=4)


for n in range(len(mso_set)):
    name='MSO_'+str(n)
    try:
        fig = plt.figure(figsize=(15.0, 15.0))
        ax1 = fig.add_subplot(3,1,1)
        sns.heatmap(ratio_cond[name],cmap='Spectral',annot=False,xticklabels=labels,norm=LogNorm(),yticklabels=y_labe, linewidth=0.1,linecolor='silver',cbar_kws = dict(label='Weighted with Cond. Prob. of Activations')) #,cbar_kws={'label': 'Cond. Prob. of Activations','location'="right"}
        #ax1.title.set_text(name+' Conditional prob of Activations')
        ax1 = fig.add_subplot(3,1,2)
        sns.heatmap(ratio_mean[name],cmap='Spectral',annot=False,xticklabels=labels,norm=LogNorm(),yticklabels=y_labe, linewidth=0.1,linecolor='silver',cbar_kws = dict(label='Weighted with Confidence Mean'))
        #ax1.title.set_text(name+' Confidence Mean')
        ax1 = fig.add_subplot(3,1,3)
        sns.heatmap(ratio_std[name],cmap='Spectral',annot=False,xticklabels=labels,norm=LogNorm(),yticklabels=y_labe, linewidth=0.1,linecolor='silver',cbar_kws = dict(label='Weighted with Confidence STD'))
        plt.show()
    except:
        print('Error printing')

# 3) find the points with best aggregation in each variable
results_selection_activ={}
results_selection_mean={}
best_arrays_activ={}
best_arrays_mean={}
template_print=[]
for i in range(ratio_cond[name].shape[0]):
    template_print.append([])
    for j in range(ratio_cond[name].shape[1]):
        template_print[i].append(' ')
template_print=np.array(template_print)

fig = plt.figure(figsize=(15.0, 15.0))
for n in range(len(mso_set)):
    name='MSO_'+str(n)
    template_activ=copy.deepcopy(template_print)
    template_mean=copy.deepcopy(template_print)
    results_selection_activ[name],best_arrays_activ[name]=moving_average_variables(ratio_cond[name],matr_prbs,var_names,wind_ratio=0.20)
    results_selection_mean[name],best_arrays_mean[name]=moving_average_variables(ratio_mean[name],matr_prbs,var_names,wind_ratio=0.20)
    i=-1
    for var in var_names:
        i=i+1
        if results_selection_activ[name][var]['score']!='too narrow to evaluate':
            half=int((results_selection_activ[name][var]['window']-1)/2)
            template_activ[i,results_selection_activ[name][var]['position']-half:results_selection_activ[name][var]['position']+half+1]='*'
            template_mean[i,results_selection_mean[name][var]['position']-half:results_selection_mean[name][var]['position']+half+1]='*'
    try:
        
        ax1 = fig.add_subplot(3,2,n+1)
        #sns.heatmap(ratio_cond[name],cmap='Spectral',annot=template_activ, fmt ='',xticklabels=labels,norm=LogNorm(),yticklabels=y_labe, linewidth=0.1,linecolor='silver',cbar_kws = dict(label='Weighted with Cond. Prob. of Activations')) #,cbar_kws={'label': 'Cond. Prob. of Activations','location'="right"}
        #ax1.title.set_text(name+' Conditional prob of Activations')
        #ax1 = fig.add_subplot(3,1,2)
        sns.heatmap(ratio_mean[name],cmap='Spectral',annot=template_mean, fmt ='',xticklabels=labels,norm=LogNorm(),yticklabels=y_labe, linewidth=0.1,linecolor='silver',cbar_kws = dict(label='Weighted with Confidence Mean'))
        #ax1.title.set_text(name+' Confidence Mean')
        #ax1 = fig.add_subplot(3,1,3)
        #sns.heatmap(ratio_std[name],cmap='Spectral',annot=False,xticklabels=labels,norm=LogNorm(),yticklabels=y_labe, linewidth=0.1,linecolor='silver',cbar_kws = dict(label='Weighted with Confidence STD'))
        ax1.title.set_text(name)
    except:
        print('Error printing')
        
fig.suptitle("Weighted Corrections and Window Selection: Mean Conf.")
plt.show()
    
# 4) Select / order -- Take into account Activ and Mean conf + STD of Mean
# we get all the necesary metrics for the final ranking ... with several categories and then we add them up (like a talent contest)
sum_up_data={}
for n in range(len(mso_set)):
    name='MSO_'+str(n)
    sum_up_data[name]={}
    sum_up_data[name]['activ_acc']=[]
    sum_up_data[name]['prob_acc']=[]
    sum_up_data[name]['ratio_score']=[]
    sum_up_data[name]['interval']=[]
    sum_up_data[name]['mean_pos_dist_vs_wind']=[]
    sum_up_data[name]['conf_std_values_vs_avg']=[]
    sum_up_data[name]['cond_prob_mean']=[]
    sum_up_data[name]['conf_mean']=[]
    i=-1
    for var in var_names:
        i=i+1
        var=var_names[i]
        sum_up_data[name][var]={}
        if results_selection_activ[name][var]['score']!='too narrow to evaluate':
            half=int((results_selection_activ[name][var]['window']-1)/2)
            sum_up_data[name]['activ_acc'].append(sum(mtr_perc_activ[name][i,results_selection_activ[name][var]['position']-half:results_selection_activ[name][var]['position']+half+1]))
            sum_up_data[name]['prob_acc'].append(sum(matr_prbs[i,results_selection_activ[name][var]['position']-half:results_selection_activ[name][var]['position']+half+1]))
            sum_up_data[name]['ratio_score'].append(sum_up_data[name]['activ_acc'][i]/sum_up_data[name]['prob_acc'][i])
            sum_up_data[name]['interval'].append([bins[var][results_selection_activ[name][var]['position']-half],bins[var][results_selection_activ[name][var]['position']+half+1]])
            sum_up_data[name]['mean_pos_dist_vs_wind'].append(abs(results_selection_activ[name][var]['position']-results_selection_mean[name][var]['position'])/results_selection_activ[name][var]['window'])
            sum_up_data[name]['conf_std_values_vs_avg'].append(np.mean(corrected_std[name][i,results_selection_activ[name][var]['position']-half:results_selection_activ[name][var]['position']+half+1])/np.mean(corrected_std[name][i,:]))
            #print(sum_up_data[name]['conf_std_values_vs_avg'])
            sum_up_data[name]['cond_prob_mean'].append(np.mean(corrected_cond[name][i,results_selection_activ[name][var]['position']-half:results_selection_activ[name][var]['position']+half+1]))
            sum_up_data[name]['conf_mean'].append(np.mean(corrected_mean[name][i,results_selection_activ[name][var]['position']-half:results_selection_activ[name][var]['position']+half+1]))
        else:
            sum_up_data[name]['activ_acc'].append(0)
            sum_up_data[name]['prob_acc'].append(0)
            sum_up_data[name]['ratio_score'].append(0)
            sum_up_data[name]['interval'].append(0)
            sum_up_data[name]['mean_pos_dist_vs_wind'].append(0)
            sum_up_data[name]['conf_std_values_vs_avg'].append(0)
            sum_up_data[name]['cond_prob_mean'].append(0)
            sum_up_data[name]['conf_mean'].append(0)

# To merge, each of the major 3 indicators is taken and ranked. 
#The average position is weighted by the possition distances between cond_prob and mean_conf combined with the rank of std_conf

import scipy.stats as ss
result_scores={}
selected_key_vars={}
for n in range(len(mso_set)):
    name='MSO_'+str(n)
    selected_key_vars[name]=[]
    ratio_score=ss.rankdata(sum_up_data[name]['ratio_score'],method='dense')
    cond_prob_mean=ss.rankdata(sum_up_data[name]['cond_prob_mean'],method='dense')
    conf_mean=ss.rankdata(sum_up_data[name]['conf_mean'],method='dense')
    conf_std_values_vs_avg=np.array(sum_up_data[name]['conf_std_values_vs_avg'])
    mean_pos_dist=np.array(sum_up_data[name]['mean_pos_dist_vs_wind'])
    print(name)
    print('   Total Count Results: '+str((ratio_score+cond_prob_mean+conf_mean)))
    print('   Boost Multiplier Dist: '+str((1/(1+np.abs(mean_pos_dist)))))
    print('   Boost Multiplier STD: '+str(np.sqrt(np.abs(conf_std_values_vs_avg))))
    result_scores[name]=(ratio_score+cond_prob_mean+conf_mean)*(1/(1+np.abs(mean_pos_dist)))*np.sqrt(np.abs(conf_std_values_vs_avg)) 
    print('   Final Scores: '+str(result_scores[name]))
    #Only pay attention to the vars that represent 60(?)% of the total points
    not_assembled=True
    acc=0
    result_order=np.argsort(result_scores[name])
    i=0
    to_print=''
    while not_assembled:
        i=i+1
        acc=acc+result_scores[name][result_order[-i]]/sum(result_scores[name])
        selected_key_vars[name].append(result_order[-i])
        to_print=to_print+var_names[result_order[-i]]+', '
        if acc>=0.6:
            not_assembled=False
            print('   The Selected variables are: '+to_print)
    print('------------------------------------------------')      
    
# now across all MSOs, what is the final result --> the MSOs with more total activations more weight right?
weight=[]
for n in range(len(mso_set)):
    name='MSO_'+str(n)
    weight.append(sum(activations[n]))
    
weight=(np.array(weight)/sum(weight))**0.5
weight=weight/sum(weight)


for n in range(len(mso_set)):
    name='MSO_'+str(n)
    if n==0:
        combined_result=result_scores[name]*weight[n]
    else:
        combined_result=result_scores[name]*weight[n]+combined_result

not_assembled=True   
acc=0     
result_order=np.argsort(combined_result)
vars_final=[]
i=0
to_print=''
while not_assembled:
    i=i+1
    acc=acc+combined_result[result_order[-i]]/sum(combined_result)
    vars_final.append(result_order[-i])
    to_print=to_print+var_names[result_order[-i]]+', '
    if acc>=0.6:
        not_assembled=False
        print('   The Selected variables are: '+to_print)