# -*- coding: utf-8 -*-
"""
Created on Fri Oct  9 10:43:06 2020

@author: sega01
"""
import requests
from classes.elastic_manager_class import elastic_manager
import pandas as pd
import copy

path=r"\\terfile01\ULTRACOOL\PL\Projects\Shared\LAUDA Cloud\LUC - Industrial PhD\Follow Up\Evaluation MVP\gathered_telemetry.csv"
host='52.169.220.43:9200'
machine=71471
em=elastic_manager(host,machine)
em.connect()
agg_seconds=1

time_bands=[["2020-10-07T12:00:00.001Z", "2020-10-07T12:30:00.001Z"],["2020-10-07T12:30:00.001Z", "2020-10-07T13:00:00.001Z"],["2020-10-07T13:00:00.001Z", "2020-10-07T13:30:00.001Z"],["2020-10-07T13:30:00.001Z", "2020-10-07T13:59:00.001Z"],["2020-10-07T14:00:00.001Z", "2020-10-07T14:30:00.001Z"],["2020-10-07T14:30:00.001Z", "2020-10-07T15:00:00.001Z"],["2020-10-07T15:00:00.001Z", "2020-10-07T15:30:00.001Z"],["2020-10-07T15:30:00.001Z", "2020-10-07T16:00:00.001Z"],["2020-10-07T16:00:00.001Z", "2020-10-07T16:30:00.001Z"],["2020-10-07T16:30:00.001Z", "2020-10-07T16:59:00.001Z"],["2020-10-07T17:00:00.001Z", "2020-10-07T17:30:00.001Z"],["2020-10-07T17:30:00.001Z", "2020-10-07T18:00:00.001Z"],["2020-10-07T18:00:00.001Z", "2020-10-07T18:30:00.001Z"],["2020-10-07T18:30:00.001Z", "2020-10-07T18:59:00.001Z"],["2020-10-07T19:00:00.001Z", "2020-10-07T19:30:00.001Z"],["2020-10-07T19:30:00.001Z", "2020-10-07T20:00:00.001Z"],["2020-10-07T20:00:00.001Z", "2020-10-07T20:30:00.001Z"],["2020-10-07T20:30:00.001Z", "2020-10-07T21:00:00.001Z"],["2020-10-07T21:00:00.001Z", "2020-10-07T21:30:00.001Z"],["2020-10-07T21:30:00.001Z", "2020-10-07T21:59:00.001Z"],["2020-10-08T01:00:00.001Z", "2020-10-08T01:30:00.001Z"],["2020-10-08T01:30:00.001Z", "2020-10-08T02:00:00.001Z"],["2020-10-08T02:00:00.001Z", "2020-10-08T02:30:00.001Z"],["2020-10-08T02:30:00.001Z", "2020-10-08T03:00:00.001Z"],["2020-10-08T03:00:00.001Z", "2020-10-08T03:30:00.001Z"],["2020-10-08T03:30:00.001Z", "2020-10-08T04:00:00.001Z"],["2020-10-08T04:00:00.001Z", "2020-10-08T04:30:00.001Z"],["2020-10-08T04:30:00.001Z", "2020-10-08T05:00:00.001Z"],["2020-10-08T05:00:00.001Z", "2020-10-08T05:30:00.001Z"],["2020-10-08T05:30:00.001Z", "2020-10-08T06:00:00.001Z"],["2020-10-08T06:00:00.001Z", "2020-10-08T06:30:00.001Z"],["2020-10-08T06:30:00.001Z", "2020-10-08T06:59:00.001Z"],["2020-10-08T06:00:00.001Z", "2020-10-08T06:30:00.001Z"],["2020-10-08T06:30:00.001Z", "2020-10-08T07:00:00.001Z"],["2020-10-08T07:00:00.001Z", "2020-10-08T07:30:00.001Z"],["2020-10-08T07:30:00.001Z", "2020-10-08T08:00:00.001Z"],["2020-10-08T08:00:00.001Z", "2020-10-08T08:30:00.001Z"],["2020-10-08T08:30:00.001Z", "2020-10-08T09:00:00.001Z"],["2020-10-08T09:00:00.001Z", "2020-10-08T09:30:00.001Z"],["2020-10-08T09:30:00.001Z", "2020-10-08T09:59:00.001Z"],["2020-09-01T11:00:00.001Z", "2020-09-01T11:30:00.001Z"],["2020-09-01T11:30:00.001Z", "2020-09-01T12:00:00.001Z"],["2020-09-01T12:00:00.001Z", "2020-09-01T12:30:00.001Z"],["2020-09-01T12:30:00.001Z", "2020-09-01T13:00:00.001Z"],["2020-09-01T13:00:00.001Z", "2020-09-01T13:30:00.001Z"],["2020-09-01T13:30:00.001Z", "2020-09-01T14:00:00.001Z"],["2020-09-01T14:00:00.001Z", "2020-09-01T14:30:00.001Z"],["2020-09-01T14:30:00.001Z", "2020-09-01T15:00:00.001Z"],["2020-09-01T15:00:00.001Z", "2020-09-01T15:30:00.001Z"],["2020-09-01T15:30:00.001Z", "2020-09-01T16:00:00.001Z"],["2020-09-01T16:00:00.001Z", "2020-09-01T16:30:00.001Z"],["2020-09-01T16:30:00.001Z", "2020-09-01T16:59:00.001Z"],["2020-09-01T18:00:00.001Z", "2020-09-01T18:30:00.001Z"],["2020-09-01T18:30:00.001Z", "2020-09-01T19:00:00.001Z"],["2020-09-01T19:00:00.001Z", "2020-09-01T19:30:00.001Z"],["2020-09-01T19:30:00.001Z", "2020-09-01T20:00:00.001Z"],["2020-09-01T20:00:00.001Z", "2020-09-01T20:30:00.001Z"],["2020-09-01T20:30:00.001Z", "2020-09-01T20:59:00.001Z"],["2020-09-02T04:00:00.001Z", "2020-09-02T04:30:00.001Z"],["2020-09-02T04:30:00.001Z", "2020-09-02T05:00:00.001Z"],["2020-09-02T05:00:00.001Z", "2020-09-02T05:30:00.001Z"],["2020-09-02T05:30:00.001Z", "2020-09-02T06:00:00.001Z"],["2020-09-02T06:00:00.001Z", "2020-09-02T06:30:00.001Z"],["2020-09-02T06:30:00.001Z", "2020-09-02T07:00:00.001Z"],["2020-09-02T07:00:00.001Z", "2020-09-02T07:30:00.001Z"],["2020-09-02T07:30:00.001Z", "2020-09-02T08:00:00.001Z"],["2020-09-02T08:00:00.001Z", "2020-09-02T08:30:00.001Z"],["2020-09-02T08:30:00.001Z", "2020-09-02T09:00:00.001Z"],["2020-09-02T09:00:00.001Z", "2020-09-02T09:30:00.001Z"],["2020-09-02T09:30:00.001Z", "2020-09-02T09:59:00.001Z"],["2020-09-02T12:00:00.001Z", "2020-09-02T12:30:00.001Z"],["2020-09-02T12:30:00.001Z", "2020-09-02T13:00:00.001Z"],["2020-09-02T13:00:00.001Z", "2020-09-02T13:30:00.001Z"],["2020-09-02T13:30:00.001Z", "2020-09-02T14:00:00.001Z"],["2020-09-02T14:00:00.001Z", "2020-09-02T14:30:00.001Z"],["2020-09-02T14:30:00.001Z", "2020-09-02T15:00:00.001Z"],["2020-09-02T15:00:00.001Z", "2020-09-02T15:30:00.001Z"],["2020-09-02T15:30:00.001Z", "2020-09-02T16:00:00.001Z"],["2020-09-02T16:00:00.001Z", "2020-09-02T16:30:00.001Z"],["2020-09-02T16:30:00.001Z", "2020-09-02T16:59:00.001Z"],["2020-09-02T19:00:00.001Z", "2020-09-02T19:30:00.001Z"],["2020-09-02T19:30:00.001Z", "2020-09-02T20:00:00.001Z"],["2020-09-02T20:00:00.001Z", "2020-09-02T20:30:00.001Z"],["2020-09-02T20:30:00.001Z", "2020-09-02T21:00:00.001Z"],["2020-09-02T21:00:00.001Z", "2020-09-02T21:30:00.001Z"],["2020-09-02T21:30:00.001Z", "2020-09-02T22:00:00.001Z"],["2020-09-02T22:00:00.001Z", "2020-09-02T22:30:00.001Z"],["2020-09-02T22:30:00.001Z", "2020-09-02T22:59:00.001Z"],["2020-09-03T00:00:00.001Z", "2020-09-03T00:30:00.001Z"],["2020-09-03T00:30:00.001Z", "2020-09-03T01:00:00.001Z"],["2020-09-03T01:00:00.001Z", "2020-09-03T01:30:00.001Z"],["2020-09-03T01:30:00.001Z", "2020-09-03T02:00:00.001Z"],["2020-09-03T02:00:00.001Z", "2020-09-03T02:30:00.001Z"],["2020-09-03T02:30:00.001Z", "2020-09-03T03:00:00.001Z"],["2020-09-03T03:00:00.001Z", "2020-09-03T03:30:00.001Z"],["2020-09-03T03:30:00.001Z", "2020-09-03T04:00:00.001Z"],["2020-09-03T04:00:00.001Z", "2020-09-03T04:30:00.001Z"],["2020-09-03T04:30:00.001Z", "2020-09-03T05:00:00.001Z"],["2020-09-03T05:00:00.001Z", "2020-09-03T05:30:00.001Z"],["2020-09-03T05:30:00.001Z", "2020-09-03T06:00:00.001Z"],["2020-08-12T11:06:00.001Z", "2020-08-12T11:36:00.001Z"],["2020-08-12T11:36:00.001Z", "2020-08-12T11:59:00.001Z"],
 ["2020-08-12T20:00:00.001Z", "2020-08-12T20:30:00.001Z"],["2020-08-12T20:30:00.001Z", "2020-08-12T21:00:00.001Z"],["2020-08-12T21:00:00.001Z", "2020-08-12T21:30:00.001Z"],["2020-08-12T21:30:00.001Z", "2020-08-12T22:00:00.001Z"],["2020-08-12T22:00:00.001Z", "2020-08-12T22:30:00.001Z"],["2020-08-12T22:30:00.001Z", "2020-08-12T23:00:00.001Z"],["2020-08-12T23:00:00.001Z", "2020-08-12T23:30:00.001Z"],["2020-08-12T23:30:00.001Z", "2020-08-12T23:59:00.001Z"],["2020-08-13T18:00:00.001Z", "2020-08-13T18:30:00.001Z"],["2020-08-13T18:30:00.001Z", "2020-08-13T19:00:00.001Z"],["2020-08-13T19:00:00.001Z", "2020-08-13T19:30:00.001Z"],["2020-08-13T19:30:00.001Z", "2020-08-13T20:00:00.001Z"],["2020-08-13T20:00:00.001Z", "2020-08-13T20:30:00.001Z"],["2020-08-13T20:30:00.001Z", "2020-08-13T21:00:00.001Z"],["2020-08-13T21:00:00.001Z", "2020-08-13T21:30:00.001Z"],["2020-08-13T21:30:00.001Z", "2020-08-13T21:59:00.001Z"],["2020-08-14T00:00:00.001Z", "2020-08-14T00:30:00.001Z"],["2020-08-14T00:30:00.001Z", "2020-08-14T01:00:00.001Z"],["2020-08-14T01:00:00.001Z", "2020-08-14T01:30:00.001Z"],["2020-08-14T01:30:00.001Z", "2020-08-14T02:00:00.001Z"],["2020-08-14T02:00:00.001Z", "2020-08-14T02:30:00.001Z"],["2020-08-14T02:30:00.001Z", "2020-08-14T03:00:00.001Z"],["2020-08-14T03:00:00.001Z", "2020-08-14T03:30:00.001Z"],["2020-08-14T03:30:00.001Z", "2020-08-14T04:00:00.001Z"],["2020-08-14T04:00:00.001Z", "2020-08-14T04:30:00.001Z"],["2020-08-14T04:30:00.001Z", "2020-08-14T05:00:00.001Z"],["2020-08-14T05:00:00.001Z", "2020-08-14T05:30:00.001Z"],["2020-08-14T05:30:00.001Z", "2020-08-14T06:00:00.001Z"],["2020-08-14T06:00:00.001Z", "2020-08-14T06:30:00.001Z"],["2020-08-14T06:30:00.001Z", "2020-08-14T06:59:00.001Z"],["2020-08-20T10:30:00.001Z", "2020-08-20T11:00:00.001Z"],["2020-08-20T11:00:00.001Z", "2020-08-20T11:30:00.001Z"],["2020-08-20T11:30:00.001Z", "2020-08-20T12:00:00.001Z"],["2020-08-20T12:00:00.001Z", "2020-08-20T12:30:00.001Z"],["2020-08-20T12:30:00.001Z", "2020-08-20T13:00:00.001Z"],["2020-08-20T13:00:00.001Z", "2020-08-20T13:30:00.001Z"],["2020-08-20T13:30:00.001Z", "2020-08-20T14:00:00.001Z"],["2020-08-20T14:00:00.001Z", "2020-08-20T14:30:00.001Z"],["2020-08-20T14:30:00.001Z", "2020-08-20T15:00:00.001Z"],["2020-08-20T15:00:00.001Z", "2020-08-20T15:29:00.001Z"],["2020-08-20T19:30:00.001Z", "2020-08-20T20:00:00.001Z"],["2020-08-20T20:00:00.001Z", "2020-08-20T20:30:00.001Z"],["2020-08-20T20:30:00.001Z", "2020-08-20T21:00:00.001Z"],["2020-08-20T21:00:00.001Z", "2020-08-20T21:30:00.001Z"],["2020-08-20T21:30:00.001Z", "2020-08-20T22:00:00.001Z"],["2020-08-20T22:00:00.001Z", "2020-08-20T22:30:00.001Z"],["2020-08-20T22:30:00.001Z", "2020-08-20T23:00:00.001Z"],["2020-08-20T23:00:00.001Z", "2020-08-20T23:30:00.001Z"],["2020-08-20T23:30:00.001Z", "2020-08-20T23:59:00.001Z"],["2020-08-21T03:00:00.001Z", "2020-08-21T03:30:00.001Z"],["2020-08-21T03:30:00.001Z", "2020-08-21T04:00:00.001Z"],["2020-08-21T04:00:00.001Z", "2020-08-21T04:30:00.001Z"],["2020-08-21T04:30:00.001Z", "2020-08-21T05:00:00.001Z"],["2020-08-21T05:00:00.001Z", "2020-08-21T05:30:00.001Z"],["2020-08-21T05:30:00.001Z", "2020-08-21T06:00:00.001Z"],["2020-08-21T06:00:00.001Z", "2020-08-21T06:30:00.001Z"],["2020-08-21T06:30:00.001Z", "2020-08-21T07:00:00.001Z"],["2020-08-21T07:00:00.001Z", "2020-08-21T07:30:00.001Z"],["2020-08-21T07:30:00.001Z", "2020-08-21T08:00:00.001Z"],["2020-08-21T08:00:00.001Z", "2020-08-21T08:30:00.001Z"],["2020-08-21T08:30:00.001Z", "2020-08-21T08:59:00.001Z"],["2020-08-21T12:00:00.001Z", "2020-08-21T12:30:00.001Z"],["2020-08-21T12:30:00.001Z", "2020-08-21T13:00:00.001Z"],["2020-08-21T13:00:00.001Z", "2020-08-21T13:30:00.001Z"],["2020-08-21T13:30:00.001Z", "2020-08-21T14:00:00.001Z"],["2020-08-21T14:00:00.001Z", "2020-08-21T14:30:00.001Z"],["2020-08-21T14:30:00.001Z", "2020-08-21T15:00:00.001Z"],["2020-08-21T15:00:00.001Z", "2020-08-21T15:30:00.001Z"],["2020-08-21T15:30:00.001Z", "2020-08-21T16:00:00.001Z"],["2020-08-21T16:00:00.001Z", "2020-08-21T16:30:00.001Z"],["2020-08-21T16:30:00.001Z", "2020-08-21T17:00:00.001Z"],["2020-08-21T17:00:00.001Z", "2020-08-21T17:30:00.001Z"],["2020-08-21T17:30:00.001Z", "2020-08-21T17:59:00.001Z"],["2020-08-21T18:00:00.001Z", "2020-08-21T18:30:00.001Z"],["2020-08-21T18:30:00.001Z", "2020-08-21T19:00:00.001Z"],["2020-08-21T19:00:00.001Z", "2020-08-21T19:30:00.001Z"],["2020-08-21T19:30:00.001Z", "2020-08-21T20:00:00.001Z"],["2020-08-21T20:00:00.001Z", "2020-08-21T20:30:00.001Z"],["2020-08-21T20:30:00.001Z", "2020-08-21T21:00:00.001Z"],["2020-08-21T21:00:00.001Z", "2020-08-21T21:30:00.001Z"],["2020-08-21T21:30:00.001Z", "2020-08-21T21:59:00.001Z"]]
sensors_in_tables={"1":"InvInfoCirc1.Info_MotPwr","2":"EbmpapstFan_1_Mng.ElectrInfo_EBM_1.CurrPower","3":"Data_EVD_Emb_1.EVD.Variables.EEV_PosPercent.Val","8":"WaterFlowMeter","9":"SuctSH_Circ1","10":"DscgTempCirc1","11":"SubCoolCir1","13":"EvapTempCirc1","14":"CondTempCirc1","17":"W_OutTempUser","18":"W_OutTempEvap","19":"W_InTempUser","21":"FiltPress","24":"PumpPress","25":"ExtTemp"}
names=[]
for i in sensors_in_tables:
    names.append(sensors_in_tables[i])

# TELEMETRY
test_transitions=[["2020-08-12T14:00:00.001Z", "2020-08-12T14:30:00.001Z"],["2020-08-12T14:30:00.001Z", "2020-08-12T15:00:00.001Z"],["2020-08-12T15:00:00.001Z", "2020-08-12T15:30:00.001Z"],["2020-08-12T15:30:00.001Z", "2020-08-12T16:00:00.001Z"],["2020-08-12T16:00:00.001Z", "2020-08-12T16:30:00.001Z"],["2020-08-12T16:30:00.001Z", "2020-08-12T17:00:00.001Z"],["2020-08-12T17:00:00.001Z", "2020-08-12T17:30:00.001Z"],["2020-08-12T17:30:00.001Z", "2020-08-12T18:00:00.001Z"]]
first=True
back_up=[]
i=0
for time in test_transitions:
    
    body={'device':machine,'names':names,'times':[time],'aggSeconds':agg_seconds}
    r = requests.post('http://15.188.14.252:5001/collect-data',json = body) # 'http://db_manager:5001/collect-data'
    dd=r.json()
    back_up.append(dd)
    d2=pd.DataFrame(dd)
    perc=len(back_up)*100/len(test_transitions)
    print('Completed '+str(perc)+'%')
    if first:
        data=d2
        first=False
    else:
        data=data.append(d2,ignore_index=True)    

# Test Filtering
def norm(x,train_stats):
     y={}
     for name in x.columns:
         y[name]=[]
         for i in x.index:
             a=float((x.loc[i,name]-train_stats.loc[name,'mean'])/train_stats.loc[name,'std'])
             y[name].append(a)  #.apply(lambda num: (num-train_stats.loc[name,'mean'])/train_stats.loc[name,'std'])
     return pd.DataFrame(y)
        
ma_size=20 # THIS SHOULD BE CHANGED TO BE TIME DEPENDANT -- use Agg Seconds                     
max_ca_jump=[0.25/10,10/10] # change of 0.3kw in 10s gap, change of 10l/min in 10s gap
main_ca=['InvInfoCirc1.Info_MotPwr','WaterFlowMeter'] # FOR NOW --> ideally it would be a mixture 
df=copy.deepcopy(data.sort_values('timestamp'))
df['t_step']=pd.to_datetime(df['timestamp'], infer_datetime_format=True)
df['t_step']=df['t_step'].diff()
df['t_step']=df.loc[:,'t_step'].apply(lambda x: x.total_seconds())
main_steps=[]
for n in main_ca:
    name=n+'_step'
    main_steps.append(name)
    df[name]=df[n].diff()
    
df=df.drop(0)
#f_df=df[main_steps].copy()
#f_df.drop(main_steps,axis=1)
#train_stats = df.describe()
#train_stats = df.transpose()
# The moving average is forward only
df_mvavg={}
for n in main_steps: 
    name=n+'_movavg'
    df_mvavg[name]=[]
    
for i in range(df.shape[0]-ma_size):
    for n in main_steps:
        name=n+'_movavg'
        j=i+ma_size
        df_mvavg[name].append((df.iloc[i:j][n].sum())/(df.iloc[i:j]['t_step'].sum()))
# we fill the last 20 with the last mean obtained
for i in range(ma_size):
    for n in main_steps:
        name=n+'_movavg'
        df_mvavg[name].append(df_mvavg[name][df.shape[0]-ma_size-1])
for n in main_steps:
    name=n+'_movavg'
    df[name]=df_mvavg[name]