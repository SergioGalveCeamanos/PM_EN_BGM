# -*- coding: utf-8 -*-
"""
Created on Thu Apr  8 08:52:47 2021

@author: sega01
"""
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

from matplotlib import cm as CM
from matplotlib.lines import Line2D

from elasticsearch import Elasticsearch

def get_index_analytics(date,ty):
    index=ty+date[5:7]+date[0:4]
    return index 
def get_analytics(client,time_start, time_stop, device,version, names_analysis):
         ty='pm_bgm_data_' #'pm_bgm_data_'
         ind=get_index_analytics(time_start,ty) 
         response = client.search(
            index=ind,
            body={
                  "query": {
                    "bool": {
                      # Also: filter, must_not, should
                      "must": [ 
                        {
                          "match": {
                            "device": device
                          }
                        },
                        {
                          "match": {
                            "trained_version": version
                          }
                        },
                        {
                        "range": {
                        # Timestap format= "2019-12-30T09:25:20.000Z"
                        "timestamp": { 
                        "gt": time_start, # Date Format in Fault Manager: '2019-05-02 08:00:10'
                        "lt": time_stop 
                                     }
                                 }
                        }
                      ],
                      "must_not": [],
                      "should": []
                    }
                  },
                  "from": 0,
                  "size": 100,
                  "sort": [{ "timestamp" : {"order" : "asc"}}],
                  "aggs": {}
                },
            scroll='5m'
         )
         # DATA ARRANGE: each mso will have a dictionary with as many temporal series as in self.names_analysis --> all msos in the list data
         data=[]
         first=True
         for hit in response['hits']['hits']:
             #print(hit)
             if first:
                 first=False
                 n_msos=len(hit['_source'][names_analysis[0]])
                 for i in range(n_msos):
                     new_mso={}
                     for name in names_analysis:
                         field=hit['_source'][name]
                         if name=='timestamp':
                             new_mso[name]=[field]
                         else:
                             new_mso[name]=[field[i]]
                     data.append(new_mso)
             else: 
                 for i in range(n_msos):
                     for name in names_analysis:
                         field=hit['_source'][name]
                         if name=='timestamp':
                             data[i][name].append(field)
                         else:
                             data[i][name].append(field[i])

            
         sc_id=response['_scroll_id']
         more=True
         while more:
             sc=client.scroll(scroll_id=sc_id,scroll='2m') # ,scroll='1m'
             #sc_id=response['_scroll_id']
             if len(sc['hits']['hits'])==0: #|| total>20
                 more=False
             else:
                 for hit in sc['hits']['hits']:
                     if len(hit['_source'][names_analysis[0]])==n_msos:
                         for i in range(n_msos):
                             for name in names_analysis:
                                 field=hit['_source'][name]
                                 if name=='timestamp':
                                     data[i][name].append(field)
                                 else:
                                     data[i][name].append(field[i])
                     else:
                         print('  [!] WARNING: The gathered analysis data might come from different models, two sizes of MSO_SET: '+str(len(hit['_source'][names_analysis[0]]))+', '+str(n_msos)+'  | timestamp: '+hit['_source']['timestamp'])
                    
         return data
    
def fix_dict(d):
    new_d={}
    for n in d:
        new_d[int(n)]=d[n]   
    return new_d

device=74124
fault_mso_sensitivity={10: {'fc3': {0: 0.0, 1: 0.033550789166555836, 2: 0.038671484267361, 3: 0.01613857593711422, 4: 0.029344716621720588, 5: 0.006505125555928651, 6: 0.04450273473645297, 7: 0.03485088325211064, 8: 0.014131256665018754}, 'fc4': {0: 0.13418656287601166, 1: 0.1446039993703138, 2: 0.08150784790722529, 3: 0.1123210767183645, 4: 0.0995818618843575, 5: 0.09349892205776571, 6: 0.09744458964061795, 7: 0.09419123487133006, 8: 0.06153571127829215}, 'fl1': {0: 0.0, 1: 0.040846951448393495, 2: 0.038871339265551134, 3: 0.027331644442786948, 4: 0.05399268287772363, 5: 0.018368775648636627, 6: 0.04584154567628409, 7: 0.056914117698136216, 8: 0.021591127678583896}, 'fo2': {0: 0.04459336593993866, 1: 0.12794017216692544, 2: 0.0048112695374376395, 3: 0.020753617366390645, 4: 0.051778747963644296, 5: 0.029294283708993455, 6: 0.022288562343359138, 7: 0.060227425158592175, 8: 0.023038226791441636}, 'fo3': {0: 0.11129578023194903, 1: 0.10675467326400792, 2: 0.13242707113538257, 3: 0.11211382724095917, 4: 0.09061859206796369, 5: 0.12794072446922033, 6: 0.12232447245535202, 7: 0.09585845915357542, 8: 0.031024080557643764}, 'fs2': {0: 0.089593196936073, 1: 0.01666382720338836, 2: 0.07669657836978765, 3: 0.09156745935197387, 4: 0.0478031139207132, 5: 0.06420463834877227, 6: 0.07515602729725882, 7: 0.03396380971273789, 8: 0.03849748448685052}, 'fs3': {0: 0.1173555045615553, 1: 0.08224789683531779, 2: 0.11224038036271537, 3: 0.11799293606654825, 4: 0.11414373415745886, 5: 0.08451405451474535, 6: 0.13341137234191394, 7: 0.10898204358887194, 8: 0.06557817035284762}, 'fs5': {0: 0.04459336593993866, 1: 0.12794017216692544, 2: 0.0048112695374376395, 3: 0.020753617366390645, 4: 0.051778747963644296, 5: 0.029294283708993455, 6: 0.022288562343359138, 7: 0.060227425158592175, 8: 0.023038226791441636}, 'fs6': {0: 0.11129578023194903, 1: 0.10675467326400792, 2: 0.13242707113538257, 3: 0.11211382724095917, 4: 0.09061859206796369, 5: 0.12794072446922033, 6: 0.12232447245535202, 7: 0.09585845915357542, 8: 0.031024080557643764}, 'fc2': {0: 0.23777904011436923, 1: 0.21069905284890386, 2: 0.24794038172313498, 3: 0.24355065617828825, 4: 0.23339351878977238, 5: 0.2403591566011859, 6: 0.28012822929637676, 7: 0.24566930509421694, 8: 0.11471327602792765}, 'fs9': {0: 0.06738349655094902, 1: 0.0, 2: 0.08240605357472805, 3: 0.07823716334274307, 4: 0.13694569168503773, 5: 0.11783224656790099, 6: 0.03428943141367322, 7: 0.07403421295659085, 8: 0.2880655671071356}, 'fs10': {0: 0.04192390661726634, 1: 0.001997792265260223, 2: 0.047189253183856146, 3: 0.04712559874748118, 4: 0.0, 5: 0.060247064348637004, 6: 0.0, 7: 0.02768285404629856, 8: 0.01673269353216227}, 'fs8': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0, 5: 0.0, 6: 0.0, 7: 0.011539770155371722, 8: 0.27103009817301077}}, 16: {'fc1': {0: 0.48743440791996373, 1: 0.5, 2: 0.49697899607674945, 3: 0.4817323971273596, 4: 0.48741228598000813}, 'fs2': {0: 0.0688241212885236, 1: 0.03354952032167269, 2: 0.07033976037902165, 3: 0.012175616855574653, 4: 0.05567528607898501}, 'fs3': {0: 0.15765587991678406, 1: 0.12149033399126918, 2: 0.14368942343701688, 3: 0.1381825082677645, 4: 0.14388731731152374}, 'fs5': {0: 0.12189452076600948, 1: 0.21308477062560985, 2: 0.15373028522215598, 3: 0.1870500730709257, 4: 0.13621848635559244}, 'fs6': {0: 0.1234494309248187, 1: 0.1269794331417724, 2: 0.12921952703855497, 3: 0.12384892711852083, 4: 0.15104668599600188}, 'fl1': {0: 0.040741639183900474, 1: 0.004895941919675872, 2: 0.0060420078465011, 3: 0.05701047755985474, 4: 0.02575993827788884}}, 30: {'fc1': {0: 0.2541967401618086, 1: 0.22713486480166112, 2: 0.2590253482498256, 3: 0.24356366306692992, 4: 0.23474151507209057}, 'fc5': {0: 0.003587550244413122, 1: 0.001775048004834678, 2: 0.0, 3: 0.0009867939127504667, 4: 0.0005541934201391755}, 'fc3': {0: 0.021263537638682186, 1: 0.026673381645614707, 2: 0.02004041223687934, 3: 0.01284672273043316, 4: 0.028152467882726094}, 'fc4': {0: 0.062143992999015456, 1: 0.05402245772665792, 2: 0.06918977084506238, 3: 0.07367703047710422, 4: 0.04897182816009883}, 'fo2': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0}, 'fo3': {0: 0.09184687082033514, 1: 0.09775280411539178, 2: 0.08810914263926674, 3: 0.09305971300678285, 4: 0.09631219322276226}, 'fc2': {0: 0.1951138201752627, 1: 0.18709873324117413, 2: 0.19463497887069972, 3: 0.18627466318278685, 4: 0.20013818335098008}, 'fs8': {0: 0.00040218452841243673, 1: 0.04491590570257302, 2: 0.03379576553992531, 3: 0.07167120136003632, 4: 0.032561177569934464}, 'fs10': {0: 0.09239747538716649, 1: 0.10504351030998207, 2: 0.05613882113163614, 3: 0.060523032553062614, 4: 0.09512026494631273}, 'fl1': {0: 0.026434864087245536, 1: 0.03316518808113675, 2: 0.02944823765099196, 3: 0.013985077643675965, 4: 0.039957088479619284}, 'fs2': {0: 0.062143992999015456, 1: 0.05402245772665792, 2: 0.06918977084506238, 3: 0.07367703047710422, 4: 0.04897182816009883}, 'fs3': {0: 0.09503454989389469, 1: 0.06886779652408938, 2: 0.09231860935138385, 3: 0.07568856466980006, 4: 0.07765287309233633}, 'fs6': {0: 0.09184687082033514, 1: 0.09775280411539178, 2: 0.08810914263926674, 3: 0.09305971300678285, 4: 0.09631219322276226}, 'fs12': {0: 0.003587550244413122, 1: 0.001775048004834678, 2: 0.0, 3: 0.0009867939127504667, 4: 0.0005541934201391755}}, 41: {'fc1': {0: 0.2651108351677982, 1: 0.1634623267568102, 2: 0.2417379182700708, 3: 0.2366004755409188, 4: 0.25713518035279154}, 'fl1': {0: 0.0, 1: 0.013572988401239477, 2: 0.02320793318116145, 3: 0.00916270484754838, 4: 0.024209080835741283}, 'fc3': {0: 0.0, 1: 0.004255424244692577, 2: 0.012085768731641825, 3: 0.00916270484754838, 4: 0.018519471157823975}, 'fc4': {0: 0.12182610123419657, 1: 0.07650181582300969, 2: 0.10551595448547542, 3: 0.127988000549419, 4: 0.10468075955635882}, 'fo2': {0: 0.12182610123419657, 1: 0.07650181582300969, 2: 0.10551595448547542, 3: 0.127988000549419, 4: 0.10468075955635882}, 'fo3': {0: 0.0785358360553973, 1: 0.032956963636854436, 2: 0.07311932300178378, 3: 0.053305608581613866, 4: 0.07459900992185912}, 'fc2': {0: 0.1472264930217163, 1: 0.09085612284329807, 2: 0.1494068674210637, 3: 0.10964535204289212, 4: 0.1599656318101576}, 'fs9': {0: 0.0, 1: 0.1674856773854643, 2: 0.019292288598960153, 3: 0.0, 4: 0.0}, 'fs8': {0: 0.0, 1: 0.22026210248535835, 2: 0.03876711042438676, 3: 0.08426436029463102, 4: 0.004459283466635173}, 'fs1': {0: 0.0003637981188967815, 1: 0.0, 2: 0.0007351275794295972, 3: 0.005282317205090673, 4: 0.0003052526673994385}, 'fs3': {0: 0.06474889787820433, 1: 0.04468598314039915, 2: 0.05198047633329198, 3: 0.05530686640988593, 4: 0.07216580119665623}, 'fs5': {0: 0.12182610123419657, 1: 0.07650181582300969, 2: 0.10551595448547542, 3: 0.127988000549419, 4: 0.10468075955635882}, 'fs6': {0: 0.0785358360553973, 1: 0.032956963636854436, 2: 0.07311932300178378, 3: 0.053305608581613866, 4: 0.07459900992185912}}, 52: {'fc1': {0: 0.21369327635385607, 1: 0.2178912971193889, 2: 0.21552789028853475, 4: 0.21369899808121123, 5: 0.2154531377926508, 6: 0.21822804277006533, 7: 0.21714689362126557, 8: 0.2060272737010259}, 'fc3': {0: 0.000826918746269072, 1: 0.010870223372694615, 2: 0.009123268045491259, 4: 0.00785229855763702, 5: 0.021449142975904882, 6: 0.0, 7: 0.002655365372339881, 8: 0.019553482938579905}, 'fc4': {0: 0.2122718776079276, 1: 0.197483727884979, 2: 0.2074293241686806, 4: 0.20210729807137778, 5: 0.19591061975853533, 6: 0.19753859957173162, 7: 0.21275547754128574, 8: 0.19380143433340913}, 'fo2': {0: 0.15801193469473018, 1: 0.1517692495697682, 2: 0.1528512195786932, 4: 0.1557911306366762, 5: 0.15190032221920458, 6: 0.15004799432222982, 7: 0.15431646091603263, 8: 0.15959973794575494}, 'fo3': {0: 0.0, 1: 0.0041637777059050675, 2: 0.0013606272674096017, 4: 0.002804563117738233, 5: 0.0029312648200609786, 6: 0.01170814309346602, 7: 0.0004118739027560822, 8: 0.0}, 'fc2': {0: 0.0014246425666237428, 1: 0.020666882874250038, 2: 0.008978657631583854, 4: 0.012237930179804863, 5: 0.020809718077239955, 6: 0.025429824350384187, 7: 0.0045106009136920075, 8: 0.021500773711683623}, 'fs9': {0: 0.058834663484989495, 1: 0.05416475968366646, 2: 0.025358778101960494, 4: 0.08678751059946514, 5: 0.05288150338326308, 6: 0.06312804773014531, 7: 0.027170221775990707, 8: 0.14853437044086745}, 'fs10': {0: 0.11519782467195978, 1: 0.10805644432106358, 2: 0.1312374283449362, 4: 0.09716897411724128, 5: 0.09796664921892344, 6: 0.1156913053919124, 7: 0.1420698745479067, 8: 0.025402170289073142}, 'fl1': {0: 0.0022483174921975745, 1: 0.027114014901199444, 2: 0.015861206897935833, 4: 0.016639435449732246, 5: 0.038060396189959385, 6: 0.008981300104867706, 7: 0.0066349075495636374, 8: 0.03177932230619667}, 'fs2': {0: 0.05425994291319738, 1: 0.04571447831521079, 2: 0.05457810458998738, 4: 0.046316167434701565, 5: 0.044010297539330764, 6: 0.047490605249501786, 7: 0.05843901662525313, 8: 0.03420169638765416}, 'fs5': {0: 0.15801193469473018, 1: 0.1517692495697682, 2: 0.1528512195786932, 4: 0.1557911306366762, 5: 0.15190032221920458, 6: 0.15004799432222982, 7: 0.15431646091603263, 8: 0.15959973794575494}, 'fs6': {0: 0.0, 1: 0.0041637777059050675, 2: 0.0013606272674096017, 4: 0.002804563117738233, 5: 0.0029312648200609786, 6: 0.01170814309346602, 7: 0.0004118739027560822, 8: 0.0}, 'fs8': {0: 0.0252186667735189, 1: 0.006172116976200754, 2: 0.023481648238684098, 4: 0.0, 5: 0.0037953609856611987, 6: 0.0, 7: 0.019160972415125335, 8: 0.0}}, 86: {'fc1': {0: 0.23887307523483106, 1: 0.2547902760590164, 2: 0.30334682174427724, 3: 0.2901279535842893, 4: 0.23200149057806907}, 'fc3': {0: 0.010932659566904172, 1: 0.007403380774927941, 2: 0.004900559120360379, 3: 0.0, 4: 0.010873860840725006}, 'fc4': {0: 0.1155387498570693, 1: 0.08038013271112232, 2: 0.08602344851180989, 3: 0.10868216647040685, 4: 0.1007704365654094}, 'fo2': {0: 0.04946459769826868, 1: 0.007926112514432758, 2: 0.0, 3: 0.015269809073986356, 4: 0.07891959277773329}, 'fo3': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0}, 'fc2': {0: 0.1493770505968855, 1: 0.20204927760920044, 2: 0.24716673918874893, 3: 0.20404696221303073, 4: 0.18623420238296237}, 'fs9': {0: 0.1349009177098803, 1: 0.17929948418545769, 2: 0.05031505057016607, 3: 0.07569759632471322, 4: 0.07586241821250991}, 'fc5': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0}, 'fs10': {0: 0.036615181649931924, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.06662477796705711}, 'fl1': {0: 0.054748565084414946, 1: 0.06035254323258183, 2: 0.08724511762374795, 3: 0.06285226280830053, 4: 0.05467271503721964}, 'fs11': {0: 0.0072460164422470065, 1: 0.002978839655949077, 2: 0.0, 3: 0.008023779374642168, 4: 0.002918934628369906}, 'fo5': {0: 0.0072460164422470065, 1: 0.002978839655949077, 2: 0.0, 3: 0.008023779374642168, 4: 0.002918934628369906}, 'fs2': {0: 0.06607415215880064, 1: 0.07245402019668956, 2: 0.08602344851180989, 3: 0.0934123573964205, 4: 0.021850843787676127}, 'fs3': {0: 0.079518419860251, 1: 0.12146098089024014, 2: 0.13497881472907977, 3: 0.11859352430558188, 4: 0.087432199816165}, 'fs5': {0: 0.04946459769826868, 1: 0.007926112514432758, 2: 0.0, 3: 0.015269809073986356, 4: 0.07891959277773329}}}
v="_test_I_Redo_100621"#_test_I_260521,_test_II_StabilityFilt_260521,_test_VI_StabilityFilt_090621

if v=="_test_I_260521":
    fault_mso_sensitivity={10: {'fc3': [0.035903998271201484, 0.0064824975770429805, 0.036977369455424985, 0.0, 0.01823859234591566], 'fc4': [0.08814765704461945, 0.04248315386259618, 0.12539959130400985, 0.08469994595306575, 0.17168589029441744], 'fl1': [0.047135740471734924, 0.008281676086642466, 0.06264743001525995, 0.0, 0.01823859234591566], 'fo2': [0.0, 7.239963823862627e-05, 0.10084842664488405, 0.027464008751678096, 0.09272578249811118], 'fo3': [0.12617213884043169, 0.0434853459634525, 0.09260277709067584, 0.07014000270246132, 0.0818327192433409], 'fs2': [0.08814765704461945, 0.04241075422435755, 0.024551164659125806, 0.05723593720138766, 0.07896010779630626], 'fs3': [0.10756503166262438, 0.05607645354586309, 0.10585982923523733, 0.0706670128147635, 0.11053473452801119], 'fs5': [0.0, 7.239963823862627e-05, 0.10084842664488405, 0.027464008751678096, 0.09272578249811118], 'fs6': [0.12617213884043169, 0.0434853459634525, 0.09260277709067584, 0.07014000270246132, 0.0818327192433409], 'fc2': [0.2596531119918792, 0.11038464808391393, 0.22413266688574818, 0.1582413157193076, 0.20861707206775423], 'fs9': [0.11346686610664135, 0.3545223859310853, 0.03352954097407399, 0.21855219131246495, 0.024147259870354695], 'fs10': [0.0, 0.0011941745654448412, 0.0, 0.034037513154392615, 0.020460747268420634], 'fs8': [0.00763565972581641, 0.2910487649196714, 0.0, 0.18135806093633902, 0.0]}, 16: {'fc1': [0.4981737519082215, 0.48766544143208257, 0.4793542806469006, 0.4925953533063003, 0.48823140902189016], 'fs2': [0.03470527133712724, 0.06578982566278685, 0.037815754171201366, 0.05820925402470152, 0.07436479443228859], 'fs3': [0.1279174595256942, 0.15015280406208298, 0.13523612894154066, 0.1477808934631628, 0.14019562077980596], 'fs5': [0.2011038336852787, 0.11994541702264525, 0.1502629158769238, 0.12197828285413549, 0.13961919435274858], 'fs6': [0.13368247418560203, 0.15097868262997116, 0.14039181550252988, 0.14685622482167043, 0.12315682626683219], 'fl1': [0.00441720935807635, 0.025467829190431113, 0.05693910486090357, 0.032579991530029453, 0.03443215514643444]}, 30: {'fc1': [0.272148197498368, 0.24181442013299145, 0.2366448743419905, 0.210585462593206, 0.2527127916733255, 0.23779669278352944, 0.24415908235296388, 0.2563397633481321], 'fc5': [0.002027458680100215, 0.002773039935287352, 0.0005533044831658862, 0.009818950471910653, 0.0005733815251981321, 0.0013405625204526562, 0.0007771780545361509, 0.0024479249795411164], 'fc3': [0.0, 0.024161901161231108, 0.025719831583578427, 0.020088488529481262, 0.017045155012274906, 0.005438712697060586, 0.012030525074712379, 0.047798847139575294], 'fc4': [0.0880959979494743, 0.050764052702882576, 0.049248032035166873, 0.03560836728242409, 0.06607143338348725, 0.06251040248088967, 0.04256971135563526, 0.05292034075112266], 'fo2': [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 'fo3': [0.07395567008406152, 0.07400325391010285, 0.08614386421426898, 0.0436732671834756, 0.10165855169464824, 0.10239578930667029, 0.09272500250503292, 0.08980855781789386], 'fc2': [0.187093384741011, 0.19135524530655307, 0.19332349481542435, 0.19512496268432516, 0.18958504850563984, 0.19397868799767812, 0.22226803679778398, 0.2278669857734589], 'fs8': [0.0, 0.08333398434160047, 0.06860955955443018, 0.13671283513135005, 0.02831198423889747, 0.06782098391191216, 0.015983477115568263, 4.689489624757909e-05], 'fs10': [0.10250363486851674, 0.06304474127984117, 0.07683902856324012, 0.10789476452922918, 0.07371032575573032, 0.08414220030076451, 0.112520201261555, 0.016184149826779994], 'fl1': [0.01207199338448376, 0.04847613134371312, 0.03601154114822268, 0.06280508486253246, 0.03087139884968592, 0.017781630482070727, 0.01615813331479884, 0.0507437646420442], 'fs2': [0.0880959979494743, 0.050764052702882576, 0.049248032035166873, 0.03560836728242409, 0.06607143338348725, 0.06251040248088967, 0.04256971135563526, 0.05292034075112266], 'fs3': [0.09802453608034835, 0.09273288333752402, 0.09096126852791042, 0.08858723179425515, 0.07115656275777897, 0.06054758321095932, 0.10473676025220921, 0.11066594727664665], 'fs6': [0.07395567008406152, 0.07400325391010285, 0.08614386421426898, 0.0436732671834756, 0.10165855169464824, 0.10239578930667029, 0.09272500250503292, 0.08980855781789386], 'fs12': [0.002027458680100215, 0.002773039935287352, 0.0005533044831658862, 0.009818950471910653, 0.0005733815251981321, 0.0013405625204526562, 0.0007771780545361509, 0.0024479249795411164]}, 41: {'fc1': [0.26029776732423554, 0.19148829874893508, 0.238896745596163, 0.16422015307616084, 0.2642728739821142, 0.2609478272130474], 'fl1': [0.04087225584931388, 0.02003333328362892, 0.008181247758814908, 0.027139097311237665, 0.008836756097316153, 0.02095426265552429], 'fc3': [0.017595201186061962, 0.00733848889173289, 0.007906687592961996, 0.014450628795096957, 0.0013590310273666585, 0.010976767793276623], 'fc4': [0.09049561203272047, 0.0897451078684531, 0.1233763246549427, 0.05805063171626947, 0.10862958463696842, 0.09067055709834215], 'fo2': [0.09049561203272047, 0.0897451078684531, 0.1233763246549427, 0.05805063171626947, 0.10862958463696842, 0.09067055709834215], 'fo3': [0.05596346910443041, 0.03705652819228625, 0.05505318457258675, 0.03834839720375727, 0.0857486925469422, 0.09084839167891264], 'fc2': [0.18757501993841907, 0.10841332679521509, 0.1164280812818987, 0.1116674951484324, 0.1648961211769332, 0.18396130411175493], 'fs9': [0.013398093236884066, 0.10348439927562231, 0.011390701711086169, 0.1582369878173472, 0.0, 0.0], 'fs8': [0.0, 0.17288187214549927, 0.07153362504244695, 0.2173743191785651, 0.0, 0.0], 'fs1': [0.0062862566342304195, 0.0010200825731349226, 0.005234891703846018, 0.0009299734768434102, 0.0008322069832260279, 0.0], 'fs3': [0.09056163152383277, 0.0519918182962997, 0.06019267620278065, 0.05513265563999341, 0.06241687172825407, 0.06945138357354497], 'fs5': [0.09049561203272047, 0.0897451078684531, 0.1233763246549427, 0.05805063171626947, 0.10862958463696842, 0.09067055709834215], 'fs6': [0.05596346910443041, 0.03705652819228625, 0.05505318457258675, 0.03834839720375727, 0.0857486925469422, 0.09084839167891264]}, 52: {'fc1': [0.2197909264649741, 0.2188907796487518, 0.21754531590538365, 0.2181005600708864, 0.21697268147345905], 'fc3': [0.003959417470575125, 0.009633532931425694, 0.0021316446691884124, 0.029853845277973412, 0.01731394425801682], 'fc4': [0.2129787790289674, 0.20528542061240085, 0.20362618146160505, 0.18133116934088064, 0.20441502455677826], 'fo2': [0.14461682603766685, 0.14592640704458662, 0.14679591659694588, 0.1383617459718705, 0.1443515660511115], 'fo3': [0.0018213837724241567, 0.0008143314102266744, 0.007852015830793167, 0.012192695684771588, 0.0], 'fc2': [0.008315874298111816, 0.013605359036350958, 0.016261416483601816, 0.03676939073000576, 0.012880555848664365], 'fs9': [0.03165996620146253, 0.07338621539198871, 0.09188941394758122, 0.07184205659408491, 0.04042589199884082], 'fs10': [0.13866912753679783, 0.10393364134409142, 0.0942211345303287, 0.0635941309806668, 0.11734573981313193], 'fl1': [0.008950181134157723, 0.022424560557549975, 0.008198763282173878, 0.054430540323207585, 0.029871601174697632], 'fs2': [0.0683619529913005, 0.05935901356781424, 0.056830264864659134, 0.042969423369010135, 0.06006345850566677], 'fs5': [0.14461682603766685, 0.14592640704458662, 0.14679591659694588, 0.1383617459718705, 0.1443515660511115], 'fs6': [0.0018213837724241567, 0.0008143314102266744, 0.007852015830793167, 0.012192695684771588, 0.0], 'fs8': [0.014437355253470995, 0.0, 0.0, 0.0, 0.012007970268521302]}, 86: {'fc1': [0.2682523636233243, 0.23946616766764475, 0.2560907228069728, 0.22914029153140683, 0.25242140459347423], 'fc3': [0.04986334473632703, 0.028629543601443225, 0.02119235027728986, 0.013396379212171801, 0.0048201506714945315], 'fc4': [0.12093154266990366, 0.1020373284929783, 0.06626302199854534, 0.08173578078714745, 0.08123964174194497], 'fo2': [0.043438085287627055, 0.0, 0.018198090296024313, 0.01672060637612683, 0.0], 'fo3': [0.0, 0.0, 0.0, 0.0, 0.0], 'fc2': [0.16469384467516954, 0.17404134335797458, 0.21993721728853144, 0.16603233394841674, 0.24694227092591262], 'fs9': [0.0, 0.13644914621811835, 0.1266735755079946, 0.11523592542313368, 0.14693923283252694], 'fc5': [0.0, 0.0, 0.0, 0.0, 0.0], 'fs10': [0.02745441599168061, 0.03448804114675624, 0.0, 0.10204405697245299, 0.004921150466610333], 'fl1': [0.08139895106886821, 0.0660004569086108, 0.08473247082777668, 0.05200632646873316, 0.05626975591369789], 'fs11': [0.0036253473281582125, 0.00839635912299831, 0.007180974370189369, 0.016578977502782515, 0.0027372967515339017], 'fo5': [0.0036253473281582125, 0.00839635912299831, 0.007180974370189369, 0.016578977502782515, 0.0027372967515339017], 'fs2': [0.0774934573822766, 0.1020373284929783, 0.04806493170252103, 0.06501517441102063, 0.08123964174194497], 'fs3': [0.11578521462087948, 0.10005792586749887, 0.12628758025794065, 0.108794563487698, 0.11973215760932582], 'fs5': [0.043438085287627055, 0.0, 0.018198090296024313, 0.01672060637612683, 0.0]}}

else:
    fault_mso_sensitivity={10: {'fc3': {0: 0.013168985455804435, 1: 0.028984774398167993, 2: 0.032488202787092704, 3: 0.01152982309748458, 4: 0.0}, 'fc4': {0: 0.13514116454374359, 1: 0.08475568546372805, 2: 0.10505565558857474, 3: 0.05836739147156794, 4: 0.1368193851184636}, 'fl1': {0: 0.0163848599546877, 1: 0.04697844279285733, 2: 0.059387461009194994, 3: 0.02577084064607357, 4: 0.0}, 'fo2': {0: 0.09985234344041077, 1: 0.0, 2: 0.06413273927501506, 3: 0.01541700599597909, 4: 0.056679052339593874}, 'fo3': {0: 0.116224347909718, 1: 0.12748081919870108, 2: 0.08632399713706171, 3: 0.03862920239540191, 4: 0.11206314877889181}, 'fs2': {0: 0.035288821103332826, 1: 0.08475568546372805, 2: 0.04092291631355968, 3: 0.04295038547558885, 4: 0.0801403327788697}, 'fs3': {0: 0.08316242846728504, 1: 0.10552369157136224, 2: 0.11686914610324785, 3: 0.05946654990752684, 4: 0.10685915534454525}, 'fs5': {0: 0.09985234344041077, 1: 0.0, 2: 0.06413273927501506, 3: 0.01541700599597909, 4: 0.056679052339593874}, 'fs6': {0: 0.116224347909718, 1: 0.12748081919870108, 2: 0.08632399713706171, 3: 0.03862920239540191, 4: 0.11206314877889181}, 'fc2': {0: 0.21716945902763682, 1: 0.2660528114300998, 2: 0.23555352557422757, 3: 0.12062439899455328, 4: 0.23695260179075558}, 'fs9': {0: 0.049328798910150115, 1: 0.12786232526644856, 2: 0.10051057968417677, 3: 0.29233221327936265, 4: 0.06050446805062531}, 'fs10': {0: 0.018202099837102012, 1: 0.00012494521620593735, 2: 0.00829904011577209, 3: 0.02774280595746224, 4: 0.04123965467976906}, 'fs8': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.253123174387618, 4: 0.0}}, 16: {'fc1': {0: 0.49384447574726115, 1: 0.4954415596199193, 2: 0.4970322797140561, 3: 0.4853335497515736, 4: 0.4811650871336828}, 'fs2': {0: 0.0495746290882706, 1: 0.06789210973119668, 2: 0.03198065280414665, 3: 0.07142489171155976, 4: 0.015487537261002732}, 'fs3': {0: 0.13025345413569064, 1: 0.13897282688332455, 2: 0.12107324573728506, 3: 0.15530771943070815, 4: 0.13683241801305943}, 'fs5': {0: 0.14712306237420536, 1: 0.1543898498560078, 2: 0.2090757727995512, 3: 0.11458106522299905, 4: 0.18160073762445147}, 'fs6': {0: 0.14604865879502088, 1: 0.1282494233636596, 2: 0.12639412562760238, 3: 0.11232276906360034, 4: 0.12819012008352174}, 'fl1': {0: 0.03315571985955134, 1: 0.015054230545892121, 2: 0.014443923317358515, 3: 0.061030004819559086, 4: 0.05672409988428197}}, 30: {'fc1': {0: 0.23588058328221415, 1: 0.24756926609652138, 2: 0.25834508621787583, 3: 0.22855022569711117, 4: 0.26130008163908325}, 'fc5': {0: 0.0001110429186041892, 1: 0.004631748147031716, 2: 0.002166868252718735, 3: 9.37789340567761e-05, 4: 0.0026301894741569457}, 'fc3': {0: 0.03168966393759369, 1: 0.02710917432315916, 2: 0.00370027585673827, 3: 0.015119130003925025, 4: 0.019783480543327646}, 'fc4': {0: 0.04511885527771488, 1: 0.05917759107615751, 2: 0.07734058482648073, 3: 0.05636526994822994, 4: 0.06632823179665583}, 'fo2': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0}, 'fo3': {0: 0.08376199233638423, 1: 0.09738600337790146, 2: 0.09211673481623207, 3: 0.10195407863605917, 4: 0.07977715785210795}, 'fc2': {0: 0.1926285042879553, 1: 0.20110550039673838, 2: 0.18156604545586616, 3: 0.18976160454708976, 4: 0.19677131320764146}, 'fs8': {0: 0.06428565953668434, 1: 0.08371052801577826, 2: 0.03622578258537306, 3: 0.0968668760814378, 4: 0.003519728257490961}, 'fs10': {0: 0.07884240828443732, 1: 0.0, 2: 0.0843263916613822, 3: 0.06752590151699743, 4: 0.08617606557296814}, 'fl1': {0: 0.050928279607120104, 1: 0.03691650304486881, 2: 0.00370027585673827, 3: 0.017663517532548405, 4: 0.036175203799209514}, 'fs2': {0: 0.04511885527771488, 1: 0.05917759107615751, 2: 0.07734058482648073, 3: 0.05636526994822994, 4: 0.06632823179665583}, 'fs3': {0: 0.08776111999858859, 1: 0.08119834292075272, 2: 0.08888776657516308, 3: 0.06768648958419869, 4: 0.09880296873443761}, 'fs6': {0: 0.08376199233638423, 1: 0.09738600337790146, 2: 0.09211673481623207, 3: 0.10195407863605917, 4: 0.07977715785210795}, 'fs12': {0: 0.0001110429186041892, 1: 0.004631748147031716, 2: 0.002166868252718735, 3: 9.37789340567761e-05, 4: 0.0026301894741569457}}, 41: {'fc1': {0: 0.2580967234120442, 1: 0.23527401651368288, 2: 0.23784183872402828, 3: 0.2650821415725612, 4: 0.16689834534563636}, 'fl1': {0: 0.02636062425201941, 1: 0.022363717985418457, 2: 0.008232131228617889, 3: 0.0, 4: 0.012728527010671077}, 'fc3': {0: 0.020101007407966935, 1: 0.01883382227902653, 2: 0.006690681209231249, 3: 0.0, 4: 0.003471219012072393}, 'fc4': {0: 0.10567400366706114, 1: 0.10130790464600382, 2: 0.12790232786831754, 3: 0.12182939712483543, 4: 0.0802482333377426}, 'fo2': {0: 0.10567400366706114, 1: 0.10130790464600382, 2: 0.12790232786831754, 3: 0.12182939712483543, 4: 0.0802482333377426}, 'fo3': {0: 0.07331494226683923, 1: 0.07407039331853531, 2: 0.053041384738213376, 3: 0.07882858430193233, 4: 0.032246768623842056}, 'fc2': {0: 0.15487854579134644, 1: 0.1479977690832307, 2: 0.11118203185781686, 3: 0.1470285111317509, 4: 0.09037438472411703}, 'fs9': {0: 0.0, 1: 0.010726679929080045, 2: 0.0, 3: 0.0, 4: 0.15980157737615955}, 'fs8': {0: 0.0040570711903858666, 1: 0.054572634671221205, 2: 0.08518939594780649, 3: 0.0, 4: 0.21565553747340543}, 'fs1': {0: 5.9717772841907174e-06, 1: 0.001801036120506128, 2: 0.005717491853009146, 3: 0.0003198271715234499, 4: 0.000686136411573389}, 'fs3': {0: 0.07284816063409139, 1: 0.05636582284275182, 2: 0.05535667609811075, 3: 0.06442416014579351, 4: 0.04514603538545303}, 'fs5': {0: 0.10567400366706114, 1: 0.10130790464600382, 2: 0.12790232786831754, 3: 0.12182939712483543, 4: 0.0802482333377426}, 'fs6': {0: 0.07331494226683923, 1: 0.07407039331853531, 2: 0.053041384738213376, 3: 0.07882858430193233, 4: 0.032246768623842056}}, 52: {'fc1': {0: 0.21486807070454367, 1: 0.21569122572177468, 2: 0.2172869027056597, 3: 0.20700916764110883, 4: 0.2166505290712239}, 'fc3': {0: 0.031755561209385774, 1: 0.00590697215013609, 2: 0.01376413876087217, 3: 0.018799909139042805, 4: 0.0037998296805206253}, 'fc4': {0: 0.18742699756470102, 1: 0.20132281499294716, 2: 0.19502312278490863, 3: 0.19832878081859598, 4: 0.21164282648207677}, 'fo2': {0: 0.15022458047508278, 1: 0.15384963082010325, 2: 0.15076630812915787, 3: 0.1590902881869205, 4: 0.15406563116070915}, 'fo3': {0: 0.002101922388777373, 1: 0.004872960814249948, 2: 0.0037819504788529773, 3: 0.0, 4: 0.0013008167376507029}, 'fc2': {0: 0.028365765716083697, 1: 0.01563077552770574, 2: 0.023304699835601277, 3: 0.009352204866249826, 4: 0.005739857804703433}, 'fs9': {0: 0.05093113318433347, 1: 0.08344435979089344, 2: 0.06658499239788743, 3: 0.12939830465110447, 4: 0.026369054333967187}, 'fs10': {0: 0.08770233684316289, 1: 0.097683062310279, 2: 0.09843684344052801, 3: 0.05102032912769146, 4: 0.14121611469365203}, 'fl1': {0: 0.057094711960451044, 1: 0.015402422064713647, 2: 0.032245968202770245, 3: 0.02748029596155565, 4: 0.007506715532017081}, 'fs2': {0: 0.03720241708961825, 1: 0.04747318417284392, 2: 0.044256814655750765, 3: 0.03923849263167546, 4: 0.05757719532136761}, 'fs5': {0: 0.15022458047508278, 1: 0.15384963082010325, 2: 0.15076630812915787, 3: 0.1590902881869205, 4: 0.15406563116070915}, 'fs6': {0: 0.002101922388777373, 1: 0.004872960814249948, 2: 0.0037819504788529773, 3: 0.0, 4: 0.0013008167376507029}, 'fs8': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0011919387891346305, 4: 0.018764981283751713}}, 86: {'fc1': {0: 0.26399602789571475, 1: 0.2343565497751524, 2: 0.2386676794667578, 3: 0.22866686966413358, 4: 0.29357100646663625}, 'fc3': {0: 0.009811095320732863, 1: 0.0018485311395182533, 2: 0.023014563010698916, 3: 0.012361731764613736, 4: 0.012240235578873186}, 'fc4': {0: 0.10401586895675931, 1: 0.17881559602834465, 2: 0.06318843111654912, 3: 0.10001853605462005, 4: 0.10326989098685224}, 'fo2': {0: 0.04451929600752442, 1: 0.10710805749710707, 2: 0.027790332247016793, 3: 0.03687180637909654, 4: 0.021247603412294248}, 'fo3': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0}, 'fc2': {0: 0.18334402576437184, 1: 0.06952757890260819, 2: 0.20448547323161076, 3: 0.15545133811428583, 4: 0.2144080767460622}, 'fs9': {0: 0.11652172448129894, 1: 0.1583698542810033, 2: 0.14537196909188616, 3: 0.12688705504547257, 4: 0.02224043894849313}, 'fc5': {0: 0.0, 1: 0.0, 2: 0.0, 3: 0.0, 4: 0.0}, 'fs10': {0: 0.0, 1: 0.0, 2: 0.02702089945466387, 3: 0.051880099367149594, 4: 0.02491350155070486}, 'fl1': {0: 0.05627426820144159, 1: 0.019149082332662885, 2: 0.0807101883008026, 3: 0.0555211989060951, 4: 0.08010539004388606}, 'fs11': {0: 0.001992419178575095, 1: 0.006884375730797792, 2: 0.004389204951680034, 3: 0.023416981090940456, 4: 0.0011490021322871974}, 'fo5': {0: 0.001992419178575095, 1: 0.006884375730797792, 2: 0.004389204951680034, 3: 0.023416981090940456, 4: 0.0011490021322871974}, 'fs2': {0: 0.0594965729492349, 1: 0.07170753853123757, 2: 0.03539809886953232, 3: 0.0631467296755235, 4: 0.082022287574558}, 'fs3': {0: 0.11351698605824667, 1: 0.03824040255366312, 2: 0.11778362306010502, 3: 0.08548886646803218, 4: 0.12243596101477117}, 'fs5': {0: 0.04451929600752442, 1: 0.10710805749710707, 2: 0.027790332247016793, 3: 0.03687180637909654, 4: 0.021247603412294248}}}
    
#d=["2021-05-25T12:30:00.000Z","2021-05-26T09:30:00.000Z"] #val 1
#d=["2021-05-26T10:00:00.000Z","2021-05-27T13:00:00.000Z"] #obstruction
#d=["2021-05-28T14:00:00.000Z","2021-05-29T14:00:00.000Z"] #High Temp
d=["2021-05-25T13:00:00.000Z","2021-05-26T04:00:00.000Z"] #

#dates_goal=[["2021-05-25T12:30:00.000Z","2021-05-26T09:30:00.000Z"],
#            ["2021-05-26T10:00:00.000Z","2021-05-27T13:00:00.000Z"],
#            ["2021-05-28T14:00:00.000Z","2021-05-29T14:00:00.000Z"],
#            ["2021-05-31T08:30:00.000Z","2021-06-01T12:00:00.000Z"],
#            ["2021-06-01T12:00:00.000Z","2021-06-03T07:50:00.000Z"],
#            ["2021-06-03T07:50:00.000Z","2021-06-03T11:40:00.000Z"]]

dates_goal=[["2021-05-27T17:30:00.000Z","2021-05-30T01:10:00.000Z"]]
names_analysis=['models_error', 'low_bounds', 'high_bounds', 'activations', 'confidence','group_prob','timestamp']
host='137.116.224.197:9200'
client=Elasticsearch(hosts=[host])
#data_issue=get_analytics(client,d[0],d[1],device,v,names_analysis)
data_iss=[]
for d in dates_goal:
    data_iss.append(get_analytics(client,d[0],d[1],device,v,names_analysis))
mso_set=[10, 16, 30, 41, 52, 86]
faults={1: 'fc1', 2: 'fc2', 3: 'fc3', 4: 'fc4', 6: 'fc5', 8: 'fl1', 10: 'fo2', 11: 'fo3', 12: 'fo4', 13: 'fo5', 19: 'fs1', 20: 'fs2', 21: 'fs3', 22: 'fs5', 23: 'fs6', 24: 'fs8', 25: 'fs9', 26: 'fs10', 27: 'fs11', 28: 'fs12'}
fault_signature_matrix=[[0, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1], [0, 0, 1, 0, 0, 1], [1, 1, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1], [1, 0, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0], [1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 0, 1], [1, 1, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0], [1, 0, 1, 1, 1, 0], [1, 0, 0, 1, 1, 1], [1, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0]]
priori=np.ones(len(faults))/len(faults)

if True:
    activations=[]
    confidences=[]
    error=[]
    high=[]
    low=[]
    groups=[]
    for i in range(len(mso_set)):
        for d in range(len(data_iss)):
            if d==0:
                activations.append(data_iss[d][i]['activations'])
                confidences.append(data_iss[d][i]['confidence'])
                error.append(data_iss[d][i]['models_error'])
                high.append(data_iss[d][i]['high_bounds'])
                low.append(data_iss[d][i]['low_bounds'])
                groups.append(data_iss[d][i]['group_prob'])
            else:
                activations[i]=activations[i]+data_iss[d][i]['activations']
                confidences[i]=confidences[i]+data_iss[d][i]['confidence']
                error[i]=error[i]+data_iss[d][i]['models_error']
                high[i]=high[i]+data_iss[d][i]['high_bounds']
                low[i]=low[i]+data_iss[d][i]['low_bounds']
                groups[i]=groups[i]+data_iss[d][i]['group_prob']
                
    times=data_iss[0][0]['timestamp']
    for d in data_iss[1:]:
        times=times+d[0]['timestamp']
    

sams=len(activations[0])
if False:   
    activations=[]
    start_1=int(sams/3)
    start_2=int(2*sams/3)
    for i in range(len(mso_set)):
        if i==5:
            victor_1=np.zeros(start_1)
            victor_2=np.random.randint(4, size=sams-start_1)
            victor_2=np.where(victor_2>1, 1, victor_2)
            activations.append(np.concatenate((victor_1,victor_2)))
        elif i==6:
            victor_1=np.zeros(start_2)
            victor_2=np.random.randint(2, size=sams-start_2)
            activations.append(np.concatenate((victor_1,victor_2)))
        else:
            activations.append(np.zeros(sams))
    
k_factor=0.95

up_lim_prior=0.25
option='GG'
ma=20
record=[]
priori=[]
for j in range(len(faults)):
    priori.append(1/len(faults))
    
    
# Key Strokes
sound=np.zeros((len(activations),len(activations[0])))
key_strokes=-1*np.ones(len(activations))
alpha=0.005
betha=alpha/18
gamma_y=0.5
for i in range(1,len(activations[0])):
    for j in range(len(activations)):
        if activations[j][i]==1:
            key_strokes[j]=i
            sound[j][i]=1
        else:
            #Double Decay 
            if 1-sound[j][i-1]<=gamma_y:
                sound[j][i]=sound[j][i-1]-alpha
            else:
                sound[j][i]=sound[j][i-1]-betha
                if sound[j][i]<0:
                    sound[j][i]=0
if True:
         if priori==[]:
             priori=priori
         prior_evolution=[]
         for j in range(len(faults)):
             prior_evolution.append([priori[j]])
         for i in range(ma):
             for j in range(len(faults)):
                 prior_evolution[j].append(priori[j])
         test_weights=[]  
         f_keys=list(faults.keys())  
         keystrokes=np.zeros(len(mso_set))
         
         for i in range(ma,len(activations[0])):
            right_clusters=True
            for l in range(len(mso_set)):
                if len(groups[l][i])!=len(fault_mso_sensitivity[mso_set[l]][list(fault_mso_sensitivity[mso_set[l]].keys())[0]]):
                    right_clusters=False
            if right_clusters:
                saves={}
                saves['prior_ma']=[]
                ma_prior=[]
                for j in range(len(faults)):
                    new_ma=sum(prior_evolution[j][i-ma:i])/ma
                    if new_ma>up_lim_prior:
                        ma_prior.append(up_lim_prior)
                    else: 
                        ma_prior.append(new_ma)
                total_ma=sum(ma_prior)
                for j in range(len(faults)):
                    ma_prior[j]=ma_prior[j]
                saves['prior_ma'].append(ma_prior)
                
                p_phi=[]
                fault=False
                activ_sample=[]
                right_clusters=True
                gr=[]
                for l in range(len(mso_set)):
                    gr.append(groups[l][i].index(max(groups[l][i])))
                    activ_sample.append(activations[l][i])
                    if sound[l][i]>0:
                        fault=True
                #print(' Activations: '+str(activ))
                #if an anomally is detected ...  

                if fault:
                    #first you get the probability of this marking for each fault
                    fault_phi={}
                    for j in range(len(faults)):
                        p_phi.append(0)
                        zvf=1
                        tot=0
                        contr=[]
                        for l in range(len(mso_set)):
                            contr.append(0)
                            if ((fault_signature_matrix[j][l]==0) and (sound[l][i]>gamma_y)):
                                zvf=0
                            if fault_signature_matrix[j][l]==1:
                                tot=tot+1
                                #convers=list(fault_mso_sensitivity[mso_set[l]][faults[f_keys[j]]].keys())
                                contr[l]=sound[l][i]*confidences[l][i]*abs(fault_mso_sensitivity[mso_set[l]][faults[f_keys[j]]][gr[l]]) #convers[gr[l]]
                                #print(fault_mso_sensitivity[mso_set[l]][faults[f_keys[j]]][gr])
                                p_phi[j]=p_phi[j]+sound[l][i]*confidences[l][i]*abs(fault_mso_sensitivity[mso_set[l]][faults[f_keys[j]]][gr[l]])
                        
                        fault_phi[faults[f_keys[j]]]=contr
                        if sum(fault_signature_matrix[j])>0:
                            if zvf==1:
                                p_phi[j]=p_phi[j]/tot 
                            elif tot>0:
                                p_phi[j]=p_phi[j]*0.5/tot 
                            #print([j,tot,p_phi[j]])
                    #then you compute the posterior probabilities (being the new prior probabilities)
                    saves['mso_contrib']=fault_phi
                    record.append(saves)
                    try:
                        base=0
                        for j in range(len(faults)):
                            # we test to work without bayesian convergence
                            base=base+ma_prior[j]*p_phi[j]
                        to_weight=[]
                        for j in range(len(faults)):
                            s=(p_phi[j]*ma_prior[j])/base
                            to_weight.append(s)
                        # We pass the information to the function to evaluate the probabilities using the FSSM (and maybe FSOM)
                        to_activate=[]
                        for l in range(len(mso_set)):
                            to_activate.append(activations[l][i])
                        test_weights.append(to_weight)
                        if option=='SensitivityWeight':
                            print('Miracle')
                        else:
                            s=[]
                            base=0
                            for j in range(len(faults)):
                                s.append(((1-k_factor)*to_weight[j]+k_factor*ma_prior[j])/2)#prior_evolution[j][i]
                                base=base+s[j]
                            for j in range(len(faults)):     
                                prior_evolution[j].append(s[j]/base)
                    except:
                        #traceback.print_exc()
                        print('  [!] Error preparing sample for Prior Evolution')
                        fault=False
    
                 # in case no anomally is detected get the prior probabilities close to the original
                if fault==False:
                     base=0
                     s=[]
                     for j in range(len(faults)):
                         s.append((k_factor*prior_evolution[j][-1]+(1-k_factor)*prior_evolution[j][0])/2)
                         base=base+s[j]  
                     for j in range(len(faults)):     
                         prior_evolution[j].append(s[j]/base)


for j in range(len(faults)):
    prior_evolution[j]=prior_evolution[j][ma:]
##############################################################################   
##############################################################################

fault_names=list(faults.values())
color=CM.rainbow(np.linspace(0,1,(len(mso_set))))
fig, ax = plt.subplots()
custom_lines=[]
names=[]
for mso in range(len(mso_set)):
    c=color[mso]
    ax1 = fig.add_subplot(2,3,mso+1)
    ax1.plot(np.array(activations[mso])/10,color=color[0],linewidth=2.5,alpha=0.8,label='Activations')
    ax1.plot(confidences[mso],color=color[1],linewidth=2.5,alpha=0.8,label='Confidences')
    ax1.title.set_text('MSO #'+str(mso_set[mso])+' Analysis')
    ax1.legend()
    #custom_lines.append(Line2D([0], [0], color=c, lw=4))
plt.xlabel('Samples')
plt.show() 
##############################################################################
"""# Only using activations
feasible_faults=np.zeros((len(fault_signature_matrix),len(activations[0])))
fsm=np.matrix(fault_signature_matrix)
for i in range(len(activations[0])):
    active=[]
    efs=np.arange(0,len(fault_signature_matrix))
    for j in  range(len(activations)):
        if activations[j][i]==1:
            active.append(j)
    if active!=[]:
        for m in active:
            keep=np.where(fsm[:,m]==1)[0]
            efs=np.intersect1d(efs,keep)
    
        for f in efs:
            feasible_faults[f,i]=1
    
        
# showw all the fault activations
fig = plt.figure(figsize=(20.0, 15.0))
#custom_lines.append(Line2D([0], [0], color=c, lw=4))
for f in range(len(fault_names)):
    ax1 = fig.add_subplot(5,4,f+1)
    ax1.plot(feasible_faults[f,:],linewidth=1.0,alpha=0.8,label='Fault '+fault_names[f])
    ax1.legend()
fig.suptitle("Results for Feasibility from Activations")
plt.show() 

#########################################################################
# Get all faults feasible when activation is making sound
heard_faults=np.zeros((len(fault_signature_matrix),len(activations[0])))
fsm=np.matrix(fault_signature_matrix)
for i in range(len(activations[0])):
    active=[]
    efs=np.arange(0,len(fault_signature_matrix))
    for j in  range(len(activations)):
        if sound[j,i]>0.15:
            active.append(j)
            
    if active!=[]:
        for m in active:
            keep=np.where(fsm[:,m]==1)[0]
            efs=np.intersect1d(efs,keep)
        
        for f in efs:
            heard_faults[f,i]=1
    
# showw all the fault activations
fig = plt.figure(figsize=(20.0, 15.0))
#custom_lines.append(Line2D([0], [0], color=c, lw=4))
for f in range(len(fault_names)):
    ax1 = fig.add_subplot(5,4,f+1)
    ax1.plot(heard_faults[f,:],linewidth=1.0,alpha=0.8,label='Fault '+fault_names[f])
    ax1.legend()
fig.suptitle("Results for Feasibility from Sound")
plt.show() 

#########################################################################
# Using the weights to give more insight into fault feasibility
sensitive_faults=np.zeros((len(fault_signature_matrix),len(activations[0])))
fsm=np.matrix(fault_signature_matrix)
for i in range(len(activations[0])):
    active=[]
    efs=np.arange(0,len(fault_signature_matrix))
    for j in  range(len(activations)):
        if sound[j,i]>0.15:
            active.append(j)
            
    if active!=[]:
        for m in active:
            keep=np.where(fsm[:,m]==1)[0]
            efs=np.intersect1d(efs,keep)
        
        for f in efs:
            we=1
            for m in active:
                we=we*fault_mso_sensitivity
            sensitive_faults[f,i]=1
    
# showw all the fault activations
fig = plt.figure(figsize=(20.0, 15.0))
#custom_lines.append(Line2D([0], [0], color=c, lw=4))
for f in range(len(fault_names)):
    ax1 = fig.add_subplot(5,4,f+1)
    ax1.plot(sensitive_faults[f,:],linewidth=1.0,alpha=0.8,label='Fault '+fault_names[f])
    ax1.legend()
plt.show() """

#########################################################################
#########################################################################
if True:
        s=-1
        end=np.floor(len(faults)/3)
        color=iter(CM.rainbow(np.linspace(0,1,(int(end)-int(s)))))
        fig, ax = plt.subplots()
        i=-1
        custom_lines=[]
        names=[]
        for fault in faults:
            i=i+1
            if i>s and i<=end:
                c=next(color)
                custom_lines.append(Line2D([0], [0], color=c, lw=4))
                names.append(faults[fault])
                ax.plot(prior_evolution[i],c=c,linewidth=1.9,alpha=0.6)
        plt.xlabel('Samples')
        plt.ylabel('Fault probabilities')
        plt.title("Fault Probability Evolution")
        plt.legend(custom_lines,names)
        plt.show() 
        
        s=np.floor(len(faults)/3)
        end=np.floor(len(faults)*2/3)
        color=iter(CM.rainbow(np.linspace(0,1,(int(end)-int(s)))))
        fig, ax = plt.subplots()
        i=-1
        custom_lines=[]
        names=[]
        for fault in faults:
            i=i+1
            if i>s and i<=end:
                c=next(color)
                custom_lines.append(Line2D([0], [0], color=c, lw=4))
                names.append(faults[fault])
                ax.plot(prior_evolution[i],c=c,linewidth=1.9,alpha=0.6)
        plt.xlabel('Samples')
        plt.ylabel('Fault probabilities')
        plt.title("Fault Probability Evolution")
        plt.legend(custom_lines,names)
        plt.show() 
        
        s=np.floor(len(faults)*2/3)
        end=len(faults)
        color=iter(CM.rainbow(np.linspace(0,1,(int(end)-int(s)))))
        fig, ax = plt.subplots()
        i=-1
        custom_lines=[]
        names=[]
        for fault in faults:
            i=i+1
            if i>s and i<=end:
                c=next(color)
                custom_lines.append(Line2D([0], [0], color=c, lw=4))
                names.append(faults[fault])
                ax.plot(prior_evolution[i],c=c,linewidth=1.9,alpha=0.6)
        plt.xlabel('Samples')
        plt.ylabel('Fault probabilities')
        plt.title("Fault Probability Evolution")
        plt.legend(custom_lines,names)
        plt.show() 
        
        # only activations
        color=CM.rainbow(np.linspace(0,1,(len(mso_set))))
        fig, ax = plt.subplots()
        custom_lines=[]
        names=[]
        for mso in range(len(mso_set)):
            c=color[mso]
            #custom_lines.append(Line2D([0], [0], color=c, lw=4))
            names.append('MSO #'+str(mso_set[mso]))
            ax.plot(activations[mso],color=c,linewidth=2.5,alpha=0.8,label='MSO #'+str(mso_set[mso]))
        plt.xlabel('Samples')
        plt.ylabel('Activation Pressure')
        plt.title("MSO Activations")
        plt.legend()#custom_lines,names
        plt.show() 
        
        #only sound from activation strokes
        color=CM.rainbow(np.linspace(0,1,(len(mso_set))))
        fig, ax = plt.subplots()
        custom_lines=[]
        names=[]
        for mso in range(len(mso_set)):
            c=color[mso]
            #custom_lines.append(Line2D([0], [0], color=c, lw=4))
            names.append('MSO #'+str(mso_set[mso]))
            #if mso_set[mso]==234:
            ax.plot(sound[mso],color=color[mso],linewidth=2.5,alpha=0.8,label='Damped MSO #'+str(mso_set[mso]))
                #ax.plot(activations[mso],color=c,linewidth=2.5,alpha=0.8,label='Raw Activations MSO #'+str(mso_set[mso]))
        plt.xlabel('Samples')
        plt.ylabel('Activation Pressure')
        plt.title("MSO Activations")
        plt.legend()#custom_lines,names
        plt.show() 
        
        # mix of activ, 
        color=['grey','orange','r','r','b']
        custom_lines=[]
        names=[]
        for mso in range(len(mso_set)):
            fig = plt.figure(figsize=(15.0, 15.0))
            #custom_lines.append(Line2D([0], [0], color=c, lw=4))
            names.append('MSO #'+str(mso_set[mso]))
            ax1 = fig.add_subplot(2,1,1)
            ax1.plot(np.array(activations[mso])/10,color=color[0],linewidth=2.5,alpha=0.8,label='Activations')
            ax1.plot(confidences[mso],color=color[1],linewidth=2.5,alpha=0.8,label='Confidences')
            ax2 = fig.add_subplot(2,1,2)
            ax2.plot(high[mso],color=color[2],linewidth=1.5,alpha=0.8,label='High Bounds')
            ax2.plot(low[mso],color=color[3],linewidth=1.5,alpha=0.8,label='Low Bounds')
            ax2.plot(error[mso],color=color[4],linewidth=1.5,alpha=0.8,label='Error')
            plt.xlabel('Samples')
            #plt.ylabel('Activation Pressure')
            fig.suptitle('MSO #'+str(mso_set[mso]))
            plt.legend()#custom_lines,names
            plt.show() 
custom_plot_ppt=False
if custom_plot_ppt:
        mso=0
        colors=['r','gold','orchid','limegreen','royalblue','chocolate'] # groups colours
        fig, ax = plt.subplots()
        # group ploting
        gs=[]
        x=[]
        i=-1
        g_old=groups[mso][0].index(max(groups[mso][0]))
        for g in groups[mso]:
            i=i+1
            x.append(i)
            g_new=g.index(max(g))
            gs.append(g_new)
            if g_new!=g_old:
                plt.axvline(x=i, color='grey', linestyle='--')
            g_old=g_new
        import matplotlib.transforms as mtransforms
        trans = mtransforms.blended_transform_factory(ax.transData, ax.transAxes)
        for c in range(len(colors)):
            ax.fill_between(x, -1, 1, where=np.array(gs) == c, facecolor=colors[c], alpha=0.3,label='Group #'+str(c))
        ax.plot(error[mso],color=color[4],linewidth=1.5,alpha=0.9,label='Error')
        ax.plot(high[mso],color=color[2],linewidth=1.5,alpha=0.8,label='High Bounds')
        ax.plot(low[mso],color=color[3],linewidth=1.5,alpha=0.8,label='Low Bounds')
        plt.legend()
        plt.show()
        
        fault_line=[]
        v_lines=[]
        for f in dates_goal[1:]:
            fault_line.append(f[0])
        crossed=np.zeros(len(fault_line))
        for i in range(len(times)):
            for f in range(len(fault_line)):
                if crossed[f]==0 and times[i]>fault_line[f]:
                    crossed[f]=1
                    v_lines.append(i)
        fig = plt.figure(figsize=(15.0, 15.0))
        #custom_lines.append(Line2D([0], [0], color=c, lw=4))
        names.append('MSO #'+str(mso_set[mso]))
        ax1 = fig.add_subplot(2,1,1)
        ax1.plot(np.array(activations[mso])/10,color=color[0],linewidth=2.5,alpha=0.8,label='Activations')
        ax1.plot(confidences[mso],color=color[1],linewidth=2.5,alpha=0.8,label='Confidences')
        for v in v_lines:
            ax1.axvline(x=v, color='k', linestyle='--')
        ax2 = fig.add_subplot(2,1,2)
        ax2.plot(high[mso],color=color[2],linewidth=2.5,alpha=0.8,label='High Bounds')
        ax2.plot(low[mso],color=color[3],linewidth=2.5,alpha=0.8,label='Low Bounds')
        ax2.plot(error[mso],color=color[4],linewidth=2.5,alpha=0.8,label='Error')
        for v in v_lines:
            ax2.axvline(x=v, color='k', linestyle='--')
        plt.xlabel('Samples')
        #plt.ylabel('Activation Pressure')
        fig.suptitle('MSO #'+str(mso_set[mso]))
        plt.legend()#custom_lines,names
        plt.show() 
        
if False:
    
    # fault sensitivity bar plots
    fig = plt.figure(figsize=(15.0, 20.0))
    color=CM.rainbow(np.linspace(0,1,(len(faults))))
    fault_names=list(faults.values())
    re=3
    for mso in range(len(mso_set)):
        c=color[mso]
        ax1 = fig.add_subplot(6,1,mso+1)
        bars=[]
        for f in fault_names:
            if f in fault_mso_sensitivity[mso_set[mso]]:
                bars.append(np.mean(list(fault_mso_sensitivity[mso_set[mso]][f].values())))
            else:
                bars.append(0)
        ax1.bar(fault_names,bars)
        ax1.title.set_text('MSO #'+str(mso_set[mso]))
    fig.suptitle("MSO sensitivities: Model B")
    plt.show()
    
    # SPLITTED BY GROUP activation ratios and error stats 
    #for mso in range(len(mso_set)):
    mso=5
    splited_activations=[]
    splited_highs=[]
    splited_errors=[]
    for i in range(len(groups[mso][0])):
        splited_activations.append([0])
        splited_highs.append([0])
        splited_errors.append([0])
    gr_seq=[]    
    for i in range(len(groups[mso])):
        g=groups[mso][i]
        g_new=g.index(max(g))
        gr_seq.append(g_new)
        splited_activations[g_new].append(activations[mso][i])
        splited_highs[g_new].append(high[mso][i])
        splited_errors[g_new].append(error[mso][i])
        
    fig = plt.figure(figsize=(15.0, 20.0))
    color=CM.rainbow(np.linspace(0,1,(len(faults))))
    reg_names=[]
    ax1 = fig.add_subplot(3,2,1)
    ax2 = fig.add_subplot(3,2,2)
    ax3 = fig.add_subplot(3,2,3)
    ax4 = fig.add_subplot(3,2,4)
    ax5 = fig.add_subplot(3,2,5)
    ax6 = fig.add_subplot(3,2,6)
    bars=[]
    hi_b=[]
    hi_b_std=[]
    er_b_m=[]
    er_b_std=[]
    
    for i in range(len(groups[mso][0])):
        reg_names.append('Region #'+str(i))
        bars.append(np.mean(splited_activations[i]))
        hi_b.append(np.mean(splited_highs[i]))
        hi_b_std.append(np.std(splited_highs[i]))
        er_b_m.append(np.mean(np.abs(splited_errors[i])))
        er_b_std.append(np.std(np.abs(splited_errors[i])))

    ax1.bar(reg_names,np.unique(gr_seq, return_counts=True)[1]/len(gr_seq))
    ax1.title.set_text('Appearances on sample set per region')
    ax2.bar(reg_names,bars)
    ax2.title.set_text('Activation rate per region')
    ax3.bar(reg_names,hi_b)
    ax3.title.set_text('Mean error bounds per region')
    ax4.bar(reg_names,hi_b_std)
    ax4.title.set_text('STD of error bounds per region')
    ax5.bar(reg_names,er_b_m)
    ax5.title.set_text('Mean error per region')
    ax6.bar(reg_names,er_b_std)
    ax6.title.set_text('STD of error per region')
    fig.suptitle('MSO #'+str(mso)+' | '+str(dates_goal))
    plt.show()

    # Activations and error stats 

    fig = plt.figure(figsize=(15.0, 20.0))
    color=CM.rainbow(np.linspace(0,1,(len(faults))))
    reg_names=[]
    ax1 = fig.add_subplot(3,2,1)
    ax2 = fig.add_subplot(3,2,2)
    ax3 = fig.add_subplot(3,2,3)
    ax4 = fig.add_subplot(3,2,4)
    ax5 = fig.add_subplot(3,2,5)
    ax6 = fig.add_subplot(3,2,6)
    bars=[]
    conf=[]
    hi_b=[]
    hi_b_std=[]
    er_b_m=[]
    er_b_std=[]
    
    for i in range(len(mso_set)):
        reg_names.append('MSO #'+str(mso_set[i]))
        conf.append(np.sum(confidences[i]))
        bars.append(np.mean(activations[i]))
        hi_b.append(np.mean(high[i]))
        hi_b_std.append(np.std(high[i]))
        er_b_m.append(np.mean(np.abs(error[i])))
        er_b_std.append(np.std(np.abs(error[i])))

    ax1.bar(reg_names,conf)
    ax1.title.set_text('Total confidence per mso')
    ax2.bar(reg_names,bars)
    ax2.title.set_text('Activation rate per mso')
    ax3.bar(reg_names,hi_b)
    ax3.title.set_text('Mean error bounds per mso')
    ax4.bar(reg_names,hi_b_std)
    ax4.title.set_text('STD of error bounds per mso')
    ax5.bar(reg_names,er_b_m)
    ax5.title.set_text('Mean error per mso')
    ax6.bar(reg_names,er_b_std)
    ax6.title.set_text('STD of error per mso')
    fig.suptitle('MSO #'+str(mso)+' | '+str(dates_goal))
    plt.show()
    
    # logo 
    fig, ax = plt.subplots()
    # group ploting
    gs=[]
    x=[]
    i=-1
    x = np.arange(0.0, 0.5, 0.01)
    y1 = np.sin(2 * np.pi * x)
    y2 = y1*1.3333+0.1
    y3 = -y2
    ax.plot(y1,color='black',linewidth=2.5,alpha=0.9,label='Error')
    ax.plot(y2,color='dimgray',linewidth=2.5,alpha=0.8,label='High Bounds')
    ax.plot(y3,color='dimgray',linewidth=2.5,alpha=0.8,label='Low Bounds')

    plt.show()